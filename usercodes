#!/bin/bash
[[ ! -d /usr/local/lib/sped/tools ]] && exit [[ ! -d /usr/local/include/snaps ]] && exit
clear
clear
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games/
#msg -bar
SCPdir="/etc/VPS-MX"
SCPfrm="${SCPdir}/herramientas" && [[ ! -d ${SCPfrm} ]] && exit
SCPinst="${SCPdir}/protocolos" && [[ ! -d ${SCPinst} ]] && exit
SCPdir2="${SCPdir}/herramientas"
SCPusr="${SCPdir}/controlador"
selection_fun() {
	local selection="null"
	local range
	for ((i = 0; i <= $1; i++)); do range[$i]="$i "; done
	while [[ ! $(echo ${range[*]} | grep -w "$selection") ]]; do
		echo -ne "\033[1;37m$(fun_trans " ► Selecione una Opcion"): " >&2
		read selection
		tput cuu1 >&2 && tput dl1 >&2
	done
	echo $selection
}

fun_trans() {
	local texto
	local retorno
	declare -A texto
	SCPidioma="${SCPdir}/idioma"
	[[ ! -e ${SCPidioma} ]] && touch ${SCPidioma}
	local LINGUAGE=$(cat ${SCPidioma})
	[[ -z $LINGUAGE ]] && LINGUAGE=es
	[[ $LINGUAGE = "es" ]] && echo "$@" && return
	[[ ! -e /usr/bin/trans ]] && wget -O /usr/bin/trans https://raw.githubusercontent.com/pedrazadixon/LACASITANULLED/main/scriptsmx/script/Install/trans &>/dev/null
	[[ ! -e /etc/VPS-MX/texto-mx ]] && touch /etc/VPS-MX/texto-mx
	source /etc/VPS-MX/texto-mx
	if [[ -z "$(echo ${texto[$@]})" ]]; then
		#ENGINES=(aspell google deepl bing spell hunspell apertium yandex)
		#NUM="$(($RANDOM%${#ENGINES[@]}))"
		retorno="$(source trans -e bing -b es:${LINGUAGE} "$@" | sed -e 's/[^a-z0-9 -]//ig' 2>/dev/null)"
		echo "texto[$@]='$retorno'" >>/etc/VPS-MX/texto-mx
		echo "$retorno"
	else
		echo "${texto[$@]}"
	fi
}
meu_ip() {
	if [[ -e /bin/IPca ]]; then
		IP="$(cat /bin/IPca)"
	else
		MEU_IP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
		MEU_IP2=$(wget -qO- ipv4.icanhazip.com)
		[[ "$MEU_IP" != "$MEU_IP2" ]] && IP="$MEU_IP2" && echo "$MEU_IP2" || IP="$MEU_IP" && echo "$MEU_IP"
		echo "$MEU_IP2" >/bin/IPca
		IP="$MEU_IP2"
	fi
}
export -f meu_ip &>/dev/null
#myip=`ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0' | head -n1`;
#myint=`ifconfig | grep -B1 "inet addr:$myip" | head -n1 | awk '{print $1}'`;
NOM=$(less /etc/VPS-MX/controlador/nombre.log) >/dev/null 2>&1
NOM1=$(echo $NOM) >/dev/null 2>&1
IDB=$(less /etc/VPS-MX/controlador/IDT.log) >/dev/null 2>&1
IDB1=$(echo $IDB) >/dev/null 2>&1
declare -A TIMEUS

MyPID="${SCPusr}/pid-vps-mx"
MyTIME="${SCPusr}/time-vps-mx"
USRdatabase="${SCPdir}/VPS-MXuser"
USRdatabaseh="${SCPdir}/User-HWID"
tokens="${SCPdir}/User-TOKEN"
[[ ! -e ${USRdatabaseh} ]] && touch ${USRdatabaseh}
[[ ! -e ${tokens} ]] && touch ${tokens}
VERY="$(ps aux | grep -v grep | grep "verifi")"
VERY2="$(ps aux | grep -v grep | grep "autodes")"
[[ -e ${MyPID} ]] && source ${MyPID} || touch ${MyPID}
[[ -e ${MyTIME} ]] && source ${MyTIME} || touch ${MyTIME}
[[ ! -e ${USRdatabase} ]] && touch ${USRdatabase}
sort ${USRdatabase} | uniq >${USRdatabase}tmp
mv -f ${USRdatabase}tmp ${USRdatabase}
# Open VPN
newclient() {
	#Nome #Senha
	usermod -p $(openssl passwd -1 $2) $1
	while [[ ${newfile} != @(s|S|y|Y|n|N) ]]; do
		msg -bar
		read -p "Crear Archivo OpenVPN? [S/N]: " -e -i S newfile
		tput cuu1 && tput dl1
	done
	if [[ ${newfile} = @(s|S) ]]; then
		# Generates the custom client.ovpn
		rm -rf /etc/openvpn/easy-rsa/pki/reqs/$1.req
		rm -rf /etc/openvpn/easy-rsa/pki/issued/$1.crt
		rm -rf /etc/openvpn/easy-rsa/pki/private/$1.key
		cd /etc/openvpn/easy-rsa/
		./easyrsa build-client-full $1 nopass >/dev/null 2>&1
		cd

		cp /etc/openvpn/client-common.txt ~/$1.ovpn
		echo "<ca>" >>~/$1.ovpn
		cat /etc/openvpn/easy-rsa/pki/ca.crt >>~/$1.ovpn
		echo "</ca>" >>~/$1.ovpn
		echo "<cert>" >>~/$1.ovpn
		cat /etc/openvpn/easy-rsa/pki/issued/$1.crt >>~/$1.ovpn
		echo "</cert>" >>~/$1.ovpn
		echo "<key>" >>~/$1.ovpn
		cat /etc/openvpn/easy-rsa/pki/private/$1.key >>~/$1.ovpn
		echo "</key>" >>~/$1.ovpn
		echo "<tls-auth>" >>~/$1.ovpn
		cat /etc/openvpn/ta.key >>~/$1.ovpn
		echo "</tls-auth>" >>~/$1.ovpn

		while [[ ${ovpnauth} != @(s|S|y|Y|n|N) ]]; do
			read -p "$(fun_trans "Colocar autenticacion de usuario en el archivo")? [S/N]: " -e -i S ovpnauth
			tput cuu1 && tput dl1
		done
		[[ ${ovpnauth} = @(s|S) ]] && sed -i "s;auth-user-pass;<auth-user-pass>\n$1\n$2\n</auth-user-pass>;g" ~/$1.ovpn
		cd $HOME
		zip ./$1.zip ./$1.ovpn >/dev/null 2>&1
		rm ./$1.ovpn >/dev/null 2>&1

		echo -e "\033[1;31m$(fun_trans "Archivo creado"): ($HOME/$1.zip)"
	fi
}

unlockall2() {
	for user in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | awk -F ':' '{print $1}'); do
		userpid=$(ps -u $user | awk {'print $1'})

		usermod -U $user &>/dev/null
	done
}

eliminar_all() {
	clear
	clear
	#msg -bar
	msg -tit
	echo -e "\033[1;31m       BORRAR TODOS LOS USUARIOS REGISTRADOS"
	msg -bar
	read -p "   ►► Enter para Continuar  o CTRL + C Cancelar ◄◄"
	echo ""
	service dropbear stop &>/dev/null
	service sshd stop &>/dev/null
	service ssh stop &>/dev/null
	service stunnel4 stop &>/dev/null
	service squid stop &>/dev/null
	for user in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | awk -F ':' '{print $1}'); do
		userpid=$(ps -u $user | awk {'print $1'})
		kill "$userpid" 2>/dev/null
		userdel $user
		echo -e "\033[1;32mUSUARIO:\033[1;33m $user \033[1;31mEliminado"
	done
	rm -rf ${SCPdir}/VPS-MXuser
	rm -rf ${USRdatabaseh}
	rm -rf ${tokens}
	rm /etc/userssh &>/dev/null
	rm /etc/userhwid &>/dev/null
	rm /etc/usertoken &>/dev/null
	service sshd restart &>/dev/null
	service ssh restart &>/dev/null
	service dropbear start &>/dev/null
	service stunnel4 start &>/dev/null
	service squid restart &>/dev/null
	rm -rf ${SCPdir}/VPS-MX-userlock &>/dev/null
	rm -rf /etc/VPS-MX/controlador/Limiter.log &>/dev/null
	unlockall2
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

reset_contador() {
	clear
	clear
	#msg -bar
	msg -tit
	echo -e "\033[1;33m          REINICIAR CONTADOR DE BLOQUEOS"
	msg -bar
	echo -e "\033[1;97m !! Usar unicamente cuando en el apartado del contador\nmarque alguna cantidad erronea. ¡¡"
	echo ""
	echo -e "\033[1;91m ## Cancelar Precione CTRL+C"
	msg -bar
	read -p "        ►► Presione enter para continuar ◄◄"
	rm -rf /etc/VPS-MX/VPS-MX-userlock
	rm -rf /etc/VPS-MX/controlador/Limiter.log
	unlockall2
	msg -bar
	echo -e "\033[1;92m           ¡¡CONTADORES REINICIADOS!!"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
SPR &
droppids() {
	local pids

	local portasVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
	local NOREPEAT
	local reQ
	local Port
	while read port; do
		reQ=$(echo ${port} | awk '{print $1}')
		Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
		[[ $(echo -e $NOREPEAT | grep -w "$Port") ]] && continue
		NOREPEAT+="$Port\n"
		case ${reQ} in

		dropbear)
			[[ -z $DPB ]] && local DPB="\033[1;31m DROPBEAR: \033[1;32m"
			DPB+="$Port "
			;;

		esac
	done <<<"${portasVAR}"

	[[ ! -z $DPB ]] && echo -e $DPB

	local port_dropbear="$DPB"
	#cat /var/log/auth.log|grep "$(date|cut -d' ' -f2,3)" > /var/log/authday.log
	cat /var/log/auth.log | tail -1000 >/var/log/authday.log
	local log=/var/log/authday.log
	local loginsukses='Password auth succeeded'
	[[ -z $port_dropbear ]] && return 1
	for port in $(echo $port_dropbear); do
		for pidx in $(ps ax | grep dropbear | grep "$port" | awk -F" " '{print $1}'); do
			pids="${pids}$pidx\n"
		done
	done
	for pid in $(echo -e "$pids"); do
		pidlogs=$(grep $pid $log | grep "$loginsukses" | awk -F" " '{print $3}')
		i=0
		for pidend in $pidlogs; do
			let i++
		done
		if [[ $pidend ]]; then
			login=$(grep $pid $log | grep "$pidend" | grep "$loginsukses")
			PID=$pid
			user=$(echo $login | awk -F" " '{print $10}' | sed -r "s/'//g")
			waktu=$(echo $login | awk -F" " '{print $2"-"$1,$3}')
			[[ -z $user ]] && continue
			echo "$user|$PID|$waktu"
		fi
	done
}

block_userfun() {
	local USRloked="/etc/VPS-MX/VPS-MX-userlock"
	local LIMITERLOG="${USRdatabase}/Limiter.log"
	local LIMITERLOG2="${USRdatabase}/Limiter2.log"
	if [[ $2 = "-loked" ]]; then
		[[ $(cat ${USRloked} | grep -w "$1") ]] && return 1
		echo " $1 (BLOCK-MULTILOGIN) $(date +%r--%d/%m/%y)"
		limseg="$(less /etc/VPS-MX/controlador/tiemdes.log)"
		KEY="xxxxxx"
		URL="https://api.telegram.org/bot$KEY/sendMessage"
		MSG="⚠️ AVISO DE VPS: $NOM1 ⚠️🔹 CUENTA: $1 ❗️📵 BLOCK FIJO/TEMPORAL 📵❗️🔓( AUTOUNLOCK EN $limseg SEGUNDOS) 🔓"
		# curl -s --max-time 10 -d "chat_id=$IDB1&disable_web_page_preview=1&text=$MSG" $URL &>/dev/null
		pkill -u $1 &>/dev/null

	fi
	if [[ $(cat ${USRloked} | grep -w "$1") ]]; then
		usermod -U "$1" &>/dev/null
		[[ -e ${USRloked} ]] && {
			newbase=$(cat ${USRloked} | grep -w -v "$1")
			[[ -e ${USRloked} ]] && rm ${USRloked}
			for value in $(echo ${newbase}); do
				echo $value >>${USRloked}
			done
		}
		[[ -e ${LIMITERLOG} ]] && [[ $(cat ${LIMITERLOG} | grep -w "$1") ]] && {
			newbase=$(cat ${LIMITERLOG} | grep -w -v "$1")
			[[ -e ${LIMITERLOG} ]] && rm ${LIMITERLOG}
			for value in $(echo ${newbase}); do
				echo $value >>${LIMITERLOG}
				echo $value >>${LIMITERLOG}
			done
		}
		return 1
	else
		usermod -L "$1" &>/dev/null
		pkill -u $1 &>/dev/null

		droplim=$(droppids | grep -w "$1" | cut -d'|' -f2)
		kill -9 $droplim &>/dev/null

		echo $1 >>${USRloked}
		#notifi &>/dev/null
		return 0
	fi

}

export droppids

export block_userfun
block_user() {
	clear
	clear
	#msg -bar
	local USRloked="/etc/VPS-MX/VPS-MX-userlock"
	[[ ! -e ${USRloked} ]] && touch ${USRloked}
	usuarios_ativos=('' $(mostrar_usuarios))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -verm "$(fun_trans " BLOCK/UNBLOCK | Ningun Usuario Registrado")"
		msg -bar
		return 1
	else
		msg -tit
		msg -ama "$(fun_trans " BLOCK/UNBLOCK | UsuariosActivos del Servidor")"
		msg -bar
		Numb=1
		for us in $(echo ${usuarios_ativos[@]}); do
			if [[ $(cat ${USRloked} | grep -w "${us}") ]]; then
				msg -ne "[$Numb] ->" && echo -e "\033[1;33m ${us} \033[1;31m[Bloqueado]"
			else
				msg -ne "[$Numb] ->" && echo -e "\033[1;33m ${us} \033[1;32m[Desbloqueado]"
			fi
			let Numb++
		done
		msg -bar
	fi
	msg -ama "$(fun_trans "Escriba o Seleccione Un Usuario")"
	msg -bar
	unset selection
	while [[ ${selection} = "" ]]; do
		echo -ne "\033[1;37mSeleccione: " && read selection
		tput cuu1 && tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		usuario_del="${usuarios_ativos[$selection]}"
	else
		usuario_del="$selection"
	fi
	[[ -z $usuario_del ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$usuario_del") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	msg -ne "$(fun_trans "Usuario Seleccionado"): " && echo -ne "$usuario_del "
	block_userfun "$usuario_del" && msg -verm "[$(fun_trans "Bloqueado")]" || msg -verd "[$(fun_trans "Desbloqueado")]"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
msg -bar3

add_user() {
	Fecha=$(date +%d-%m-%y-%R)
	#nome senha Dias limite
	[[ $(cat /etc/passwd | grep $1: | grep -vi [a-z]$1 | grep -v [0-9]$1 >/dev/null) ]] && return 1
	valid=$(date '+%C%y-%m-%d' -d " +$3 days") && datexp=$(date "+%F" -d " + $3 days")
	pass=$(perl -e 'print crypt($ARGV[0], "password")' $2)
	if useradd -M -s /bin/false -e ${valid} -K PASS_MAX_DAYS=$3 -p $pass -c sshm,$3 $1; then
		echo "$2" >/etc/VPS-MX/passw/$1
		echo "$1 $valid $4" >>/etc/VPS-MX/VPS-MXuser
		# echo "$1|$2|${valid}|$4" >> /etc/VPS-MX/VPS-MXuser
		echo "$1 $2 ${valid} $4" >>/etc/userssh
		msg -bar
		msg -ne "$(fun_trans "  >> IP del Servidor"): " && echo -e "$IP"
		msg -ne "$(fun_trans "  >> Usuario"): " && echo -e "$1"
		msg -ne "$(fun_trans "  >> Contraseña"): " && echo -e "$2"
		msg -ne "$(fun_trans "  >> Dias de Duracion"): " && echo -e "$3"
		msg -ne "$(fun_trans "  >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $3 days")"
		msg -ne "$(fun_trans "  >> Limite de Conexion"): " && echo -e "$4"

		[[ $(dpkg --get-selections | grep -w "openvpn" | head -1) ]] && [[ -e /etc/openvpn/openvpn-status.log ]] && newclient "$1" "$2"
		msg -bar
		[[ $(ps x | grep udpServer | grep -v grep) ]] && uds="\033[1;32m[ON] " || uds="\033[1;31m[OFF]"
		[[ $(ps x | grep udp-custom | grep -v grep) ]] && udpc="\033[1;32m1-65365 " || udpc="\033[1;31m[OFF]"

		[[ $(ps x | grep zivpn | grep -v grep) ]] && ziv="\033[1;32m5666" || ziv="\033[1;31m[OFF]"
		[[ $(ps x | grep hysteria | grep -v grep) ]] && hy="\033[1;32m36712 ,1-65365" || hy="\033[1;31m[OFF]"
		msg -azu "	[\e[93m\e[5;100m PROTOCOLOS ABIERTOS\e[0m\e[37m]"
		msg -bar
		local_ip=$IP

		if [[ ! -e /etc/VPS-MX/.pssl.txt ]]; then ssl="OFF"; else ssl=$(cat /etc/VPS-MX/.pssl.txt); fi
		if [[ ! -e /etc/VPS-MX/.pdrop.txt ]]; then pdrop="OFF"; else pdrop=$(cat /etc/VPS-MX/.pdrop.txt); fi
		if [[ ! -e /etc/VPS-MX/.ppython.txt ]]; then ppython="OFF"; else ppython=$(cat /etc/VPS-MX/.ppython.txt); fi

		echo -e " Dropbear       : $pdrop\e[0m"
		echo -e " SSL/TLS        : $ssl\e[0m"
		#echo -e " PYTHON         : $ppython\e[0m"
		echo -e " UDP-HYSTERIA   : $hy\e[0m"
		echo -e " UDP-CUSTOM     : $udpc\e[0m"
		echo -e " UDP-REQUEST    : $uds\e[0m"
		echo -e " UDP-ZIVPN      : $ziv\e[0m"

		#msg -bar
		msg -ama " PAYLOAD Editable"
		msg -verd " GET / HTTP/1.1[crlf]Host: $local_ip[crlf]Connection: Keep-Alive[crlf]User-Agent: [ua][crlf]Upgrade: websocket[crlf][crlf]"
		#msg -bar
		msg -ama " Configuracion Editable"
		msg -verd " $local_ip:22@$1:$2"
		ADM_inst="/etc/VPS-MX/Slow/install"
		ADM_slow="/etc/VPS-MX/Slow/Key"
		if [[ ! -e ${ADM_slow}/server.pub ]]; then
			echo ""
		else
			msg -bar

			msg -ama "\e[97m	DATOS DE SU CONEXION SLOWDNS"
			msg -bar
			msg -ama "   Su NS (Nameserver): \e[92m$(cat ${ADM_slow}/domain_ns)"
			msg -ama "   Su Llave: \e[92m$(cat ${ADM_slow}/server.pub)"
		#msg -bar
		fi
	else
		msg -bar
		msg -verm2 "$(fun_trans "	Error, Usuario no creado")"
		msg -bar

	fi
}
[[ ! -d /usr/local/libreria ]] && exit
add_hwid() {
	#by @rufu99
	Fecha=$(date +%d-%m-%y-%R)
	#nome senha Dias limite
	[[ $(cat /etc/passwd | grep $1: | grep -vi [a-z]$1 | grep -v [0-9]$1 >/dev/null) ]] && return 1
	valid=$(date '+%C%y-%m-%d' -d " +$3 days") && datexp=$(date "+%F" -d " + $3 days")
	pass=$(perl -e 'print crypt($ARGV[0], "password")' $1)
	if useradd -M -s /bin/false -e ${valid} -K PASS_MAX_DAYS=$3 -p $pass -c hwid,$2 $1; then
		echo "$1" >/etc/VPS-MX/passw/$1
		echo "$1 $2 ${datexp}" >>/etc/VPS-MX/User-HWID
		echo "$1 $2 ${datexp}" >>/etc/userhwid
		msg -ne "$(fun_trans "  >> IP"): " && echo -e "$IP"
		msg -ne "$(fun_trans "  >> Nombre Del Cliente"): " && echo -e "$2"
		msg -ne "$(fun_trans "  >> HWID"): " && echo -e "$1"
		msg -ne "$(fun_trans "  >> Dias de Duracion"): " && echo -e "$3"
		msg -ne "$(fun_trans "  >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $3 days")"
		#
		[[ $(ps x | grep udpServer | grep -v grep) ]] && uds="\033[1;32m[ON] " || uds="\033[1;31m[OFF]"
		[[ $(ps x | grep udp-custom | grep -v grep) ]] && udpc="\033[1;32m1-65365 " || udpc="\033[1;31m[OFF]"

		[[ $(ps x | grep zivpn | grep -v grep) ]] && ziv="\033[1;32m5666" || ziv="\033[1;31m[OFF]"
		[[ $(ps x | grep hysteria | grep -v grep) ]] && hy="\033[1;32m36712 ,1-65365" || hy="\033[1;31m[OFF]"
		msg -azu "	[\e[93m\e[5;100m PROTOCOLOS ABIERTOS\e[0m\e[37m]"
		msg -bar
		local_ip=$IP

		if [[ ! -e /etc/VPS-MX/.pssl.txt ]]; then ssl="OFF"; else ssl=$(cat /etc/VPS-MX/.pssl.txt); fi
		if [[ ! -e /etc/VPS-MX/.pdrop.txt ]]; then pdrop="OFF"; else pdrop=$(cat /etc/VPS-MX/.pdrop.txt); fi
		if [[ ! -e /etc/VPS-MX/.ppython.txt ]]; then ppython="OFF"; else ppython=$(cat /etc/VPS-MX/.ppython.txt); fi

		echo -e " Dropbear       : $pdrop\e[0m"
		echo -e " SSL/TLS        : $ssl\e[0m"
		#echo -e " PYTHON         : $ppython\e[0m"
		echo -e " UDP-HYSTERIA   : $hy\e[0m"
		echo -e " UDP-CUSTOM     : $udpc\e[0m"
		echo -e " UDP-REQUEST    : $uds\e[0m"
		echo -e " UDP-ZIVPN      : $ziv\e[0m"

		#msg -bar
		msg -ama " PAYLOAD Editable"
		msg -verd " GET / HTTP/1.1[crlf]Host: $local_ip[crlf]Connection: Keep-Alive[crlf]User-Agent: [ua][crlf]Upgrade: websocket[crlf][crlf]"
		#msg -bar
		msg -ama " Configuracion Editable"
		msg -verd " $local_ip:22@$1:$1"
		ADM_inst="/etc/VPS-MX/Slow/install"
		ADM_slow="/etc/VPS-MX/Slow/Key"
		if [[ ! -e ${ADM_slow}/server.pub ]]; then
			echo ""
		else
			msg -bar

			msg -ama "\e[97m	DATOS DE SU CONEXION SLOWDNS"
			msg -bar
			msg -ama "   Su NS (Nameserver): \e[92m$(cat ${ADM_slow}/domain_ns)"
			msg -ama "   Su Llave: \e[92m$(cat ${ADM_slow}/server.pub)"
		#msg -bar
		fi
	else
		msg -bar
		msg -verm2 "$(fun_trans "	Error, Usuario HWID no creado")"
		msg -bar

	fi

}

add_token() {
	#by @rufu99
	Fecha=$(date +%d-%m-%y-%R)
	#nome senha Dias limite
	[[ $(cat /etc/passwd | grep $1: | grep -vi [a-z]$1 | grep -v [0-9]$1 >/dev/null) ]] && return 1
	valid=$(date '+%C%y-%m-%d' -d " +$3 days") && datexp=$(date "+%F" -d " + $3 days")
	pass=$(cat ${SCPdir}/.passw)
	pasw=$(perl -e 'print crypt($ARGV[0], "password")' $pass)
	if useradd -M -s /bin/false -e ${valid} -K PASS_MAX_DAYS=$3 -p $pasw -c token,$2 $1; then

		echo "$1 $2 ${datexp}" >>/etc/VPS-MX/User-TOKEN
		echo "$1 $2 ${datexp}" >>/etc/usertoken
		msg -bar
		msg -ne "$(fun_trans "  >> IP"): " && echo -e "$IP"
		msg -ne "$(fun_trans "  >> Nombre Del Cliente"): " && echo -e "$2"
		msg -ne "$(fun_trans "  >> TOKEN ID"): " && echo -e "$1"
		msg -ne "$(fun_trans "  >> Dias de Duracion"): " && echo -e "$3"
		msg -ne "$(fun_trans "  >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $3 days")"
		#
		[[ $(ps x | grep udpServer | grep -v grep) ]] && uds="\033[1;32m[ON] " || uds="\033[1;31m[OFF]"
		[[ $(ps x | grep udp-custom | grep -v grep) ]] && udpc="\033[1;32m1-65365 " || udpc="\033[1;31m[OFF]"

		[[ $(ps x | grep zivpn | grep -v grep) ]] && ziv="\033[1;32m5666" || ziv="\033[1;31m[OFF]"
		[[ $(ps x | grep hysteria | grep -v grep) ]] && hy="\033[1;32m36712 ,1-65365" || hy="\033[1;31m[OFF]"
		msg -azu "	[\e[93m\e[5;100m PROTOCOLOS ABIERTOS\e[0m\e[37m]"
		msg -bar
		local_ip=$IP

		if [[ ! -e /etc/VPS-MX/.pssl.txt ]]; then ssl="OFF"; else ssl=$(cat /etc/VPS-MX/.pssl.txt); fi
		if [[ ! -e /etc/VPS-MX/.pdrop.txt ]]; then pdrop="OFF"; else pdrop=$(cat /etc/VPS-MX/.pdrop.txt); fi
		if [[ ! -e /etc/VPS-MX/.ppython.txt ]]; then ppython="OFF"; else ppython=$(cat /etc/VPS-MX/.ppython.txt); fi

		echo -e " Dropbear       : $pdrop\e[0m"
		echo -e " SSL/TLS        : $ssl\e[0m"
		#echo -e " PYTHON         : $ppython\e[0m"
		echo -e " UDP-HYSTERIA   : $hy\e[0m"
		echo -e " UDP-CUSTOM     : $udpc\e[0m"
		echo -e " UDP-REQUEST    : $uds\e[0m"
		echo -e " UDP-ZIVPN      : $ziv\e[0m"

		#msg -bar
		msg -ama " PAYLOAD Editable"
		msg -verd " GET / HTTP/1.1[crlf]Host: $local_ip[crlf]Connection: Keep-Alive[crlf]User-Agent: [ua][crlf]Upgrade: websocket[crlf][crlf]"
		#msg -bar
		msg -ama " Configuracion Editable"
		msg -verd " $local_ip:22@$1:$1"
		ADM_inst="/etc/VPS-MX/Slow/install"
		ADM_slow="/etc/VPS-MX/Slow/Key"
		if [[ ! -e ${ADM_slow}/server.pub ]]; then
			echo ""
		else
			msg -bar

			msg -ama "\e[97m	DATOS DE SU CONEXION SLOWDNS"
			msg -bar
			msg -ama "   Su NS (Nameserver): \e[92m$(cat ${ADM_slow}/domain_ns)"
			msg -ama "   Su Llave: \e[92m$(cat ${ADM_slow}/server.pub)"
		#msg -bar
		fi
	else
		msg -bar
		msg -verm2 "$(fun_trans "	Error, Usuario TOKEN no creado")"
		msg -bar

	fi

}

mostrar_hwid() {
	#by @rufu99
	for u in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | grep -w 'hwid' | awk -F ':' '{print $1}'); do
		echo "$u"
	done
}
mostrar_token() {
	#by @rufu99
	for u in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | grep -w 'token' | awk -F ':' '{print $1}'); do
		echo "$u"
	done
}

mostrar_user() {
	#by @rufu99
	for u in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | grep -w 'sshm' | awk -F ':' '{print $1}'); do
		echo "$u"
	done
}

new_hwid() {
	#by @rufu99
	clear
	clear
	#msg -bar
	#usuarios_ativo=($(cat ${USRdatabaseh}|cut -d'|' -f1))
	usuarios_ativos=('' $(mostrar_hwid))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -ama "   AGREGAR USUARIO HWID| Ningun Usuario Registrado\n   Para Las Aplicaciones HTTP Injector | HTTP Custom"
		msg -bar
	else
		msg -tit
		msg -ama "  AGREGAR USUARIO HWID| Usuarios  Activos en Servidor\n   Para Las Aplicaciones HTTP Injector | HTTP Custom"
		msg -bar
		for us in $(echo ${usuarios_ativos[@]}); do
			msg -ne " >> Usuario: " && echo "${us}"

		done
		msg -bar
	fi
	while true; do
		msg -ne "$(fun_trans "Ingrese El Usuario HWID")"
		read -p ": " hwid
		if [[ -z $hwid ]]; then
			err_fun 16 && continue
		elif [[ "${#hwid}" -lt "31" ]]; then
			err_fun 17 && continue
		elif [[ "${#hwid}" -gt "33" ]]; then
			err_fun 18 && continue
		elif [[ "$(echo ${usuarios_ativos[@]} | grep -w "$hwid")" ]]; then
			err_fun 14 && continue
		fi
		break
	done
	while true; do
		msg -ne "$(fun_trans "Nombre Del Usuario")"

		read -p ": " usuario
		usuario="$(echo $usuario | sed -e 's/[^a-z0-9 -]//ig')"
		if [[ -z $usuario ]]; then
			err_fun 1 && continue
		elif [[ "${#usuario}" -lt "2" ]]; then
			err_fun 2 && continue
		elif [[ "${#usuario}" -gt "10" ]]; then
			err_fun 3 && continue

		fi
		break
	done

	while true; do
		msg -ne "$(fun_trans "Tiempo de Duracion")"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			err_fun 9 && continue
		fi
		break
	done
	clear
	echo ""
	msg -bar
	add_hwid "${hwid}" "${usuario}" "${diasuser}"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
new_token() {
	#by @rufu99
	clear
	clear
	#msg -bar
	#usuarios_ativo=($(cat ${tokens}|cut -d'|' -f1))
	usuarios_ativos=('' $(mostrar_token))
	if [[ ! -e ${SCPdir}/.passw ]]; then
		msg -tit
		msg -ama "   AGREGAR USUARIO TOKEN| Ningun Usuario Registrado\n   Para Aplicaciones MOD"
		msg -bar
		echo -ne "\e[1;33m DIGITE SU TOKEN GENERAL:\e[31m "
		read tg
		echo "$tg" >${SCPdir}/.passw
		msg -bar
	else
		msg -tit
		msg -ama "  AGREGAR USUARIO TOKEN| Usuarios  Activos en Servidor\n   Para Aplicaciones MOD"
		msg -bar
		for us in $(echo ${usuarios_ativos[@]}); do
			msg -ne " >> Usuario: " && echo "${us}"
		done
		msg -bar
	fi

	while true; do
		msg -ne "$(fun_trans "Ingrese El Usuario TOKEN")"
		read -p ": " toke
		if [[ -z $toke ]]; then
			err_fun 19 && continue
		elif [[ "${#toke}" -lt "15" ]]; then
			err_fun 20 && continue
		elif [[ "${#toke}" -gt "17" ]]; then
			err_fun 21 && continue
		elif [[ "$(echo ${usuarios_ativos[@]} | grep -w "$toke")" ]]; then
			err_fun 14 && continue
		fi
		break
	done
	while true; do
		msg -ne "$(fun_trans "Nombre Del Cliente")"

		read -p ": " usuario
		usuario="$(echo $usuario | sed -e 's/[^a-z0-9 -]//ig')"
		if [[ -z $usuario ]]; then
			err_fun 1 && continue
		elif [[ "${#usuario}" -lt "3" ]]; then
			err_fun 2 && continue
		elif [[ "${#usuario}" -gt "10" ]]; then
			err_fun 3 && continue

		fi
		break
	done

	while true; do
		msg -ne "$(fun_trans "Tiempo de Duracion")"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			err_fun 9 && continue
		fi
		break
	done
	clear
	echo ""
	msg -bar
	add_token "${toke}" "${usuario}" "${diasuser}"

	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

renew_user_fun() {
	#nome dias
	datexp=$(date "+%F" -d " + $2 days") && valid=$(date '+%C%y-%m-%d' -d " + $2 days")
	if chage -E $valid $1 2>/dev/null || return 1; then
		userpas=$(cat /etc/VPS-MX/passw/$1)
		useredit=$(cat ${USRdatabase} | grep -w "$1")

		limit=$(echo $useredit | cut -d' ' -f3)
		echo "$limit" >/etc/limitev
		sed -i "/$1/d" ${USRdatabase}
		limite=$(cat /etc/limitev)
		echo "$userpas" >/etc/VPS-MX/passw/$1
		echo "$1 ${datexp} $limite" >>${USRdatabase}
		msg -verd "Usuario Renovado Con Exito"

	else
		msg -verm2 "Error, Usuario no Renovado"
		msg -bar
	fi
	echo ""
}
renovar_hwid() {
	#nome dias
	datexp=$(date "+%F" -d " + $2 days") && valid=$(date '+%C%y-%m-%d' -d " + $2 days")
	if chage -E $valid $1 2>/dev/null || return 1; then
		newbase=$(cat ${USRdatabaseh} | grep -w -v "$1")
		useredit=$(cat ${USRdatabaseh} | grep -w "$1")
		nombre=$(echo $useredit | cut -d' ' -f2)
		echo "$nombre" >/etc/limitev #guardar nombre del cliente
		sed -i "/$1/d" ${USRdatabaseh}
		contra=$(cat /etc/limitev | cut -d' ' -f1)
		echo "$1 $contra ${datexp}" >>${USRdatabaseh}
		msg -verd "Usuario Renovado Con Exito"

	else
		msg -verm2 "Error, Usuario no Renovado"
		msg -bar
	fi
	echo ""
}
renovar_token() {
	#nome dias
	datexp=$(date "+%F" -d " + $2 days") && valid=$(date '+%C%y-%m-%d' -d " + $2 days")
	if chage -E $valid $1 2>/dev/null || return 1; then
		newbase=$(cat ${tokens} | grep -w -v "$1")
		useredit=$(cat ${tokens} | grep -w "$1")
		pass=$(echo ${useredit} | cut -d' ' f2)
		echo "$pass" >/etc/limitev #guardar nombre del cliente
		sed -i "/$1/d" /etc/VPS-MX/User-TOKEN
		cliente=$(cat /etc/limitev | cut -d' ' -f1)
		echo "$1 $cliente ${datexp}" >>/etc/VPS-MX/User-TOKEN
		msg -verd "Usuario Renovado Con Exito"

	else
		msg -verm2 "Error, Usuario no Renovado"
		msg -bar
	fi
	echo ""

}
[[ ! -d /usr/local/lib/sped ]] && exit
edit_user_fun() {
	#nome senha dias limite
	datexp=$(date "+%F" -d " + $3 days") && valid=$(date '+%C%y-%m-%d' -d " + $3 days")
	clear
	msg -bar
	pass=$(perl -e 'print crypt($ARGV[0], "password")' $2)
	if usermod -p $pass -e $valid -c sshm,$3 $1; then

		newbase=$(cat /etc/VPS-MX/VPS-MXuser | grep -w -v "$1")
		echo "$2" >/etc/VPS-MX/passw/$1
		sed -i "/$1/d" ${USRdatabase}
		echo "$1 ${datexp} $4" >>${USRdatabase}

		msg -verd "Usuario Modificado Con Exito"
		rm -rf ${SCPusr}/Limiter.log
	else
		msg -verm2 "Error, Usuario no Modificado"
		msg -bar
	fi
	echo ""
}
rm_user() { #usuario ssh
	#nome
	userdel --force "$1" &>/dev/null || return 1
	sed -i "/$1/d" ${USRdatabase}
	rm /etc/VPS-MX/passw/$1 &>/dev/null

	sed -i "/$1/d" /etc/userssh
}
rm_hwid() { #hwid
	#nome
	userdel --force "$1" &>/dev/null || return 1
	sed -i "/$1/d" ${USRdatabaseh}
	rm /etc/VPS-MX/passw/$1 &>/dev/null

	sed -i "/$1/d" /etc/userhwid
}
rm_token() { # token
	#nome
	userdel --force "$1" &>/dev/null || return 1
	sed -i "/$1/d" ${tokens}

	sed -i "/$1/d" /etc/usertoken
}
mostrar_usuarios() {
	for u in $(cat /etc/passwd | grep 'home' | grep 'false' | grep -v 'syslog' | awk -F ':' '{print $1}'); do
		echo "$u"
	done
}
export mostrar_usuarios
dropbear_pids() {
	local pids

	local portasVAR=$(lsof -V -i tcp -P -n | grep -v "ESTABLISHED" | grep -v "COMMAND" | grep "LISTEN")
	local NOREPEAT
	local reQ
	local Port
	while read port; do
		reQ=$(echo ${port} | awk '{print $1}')
		Port=$(echo {$port} | awk '{print $9}' | awk -F ":" '{print $2}')
		[[ $(echo -e $NOREPEAT | grep -w "$Port") ]] && continue
		NOREPEAT+="$Port\n"
		case ${reQ} in

		dropbear)
			[[ -z $DPB ]] && local DPB=""
			DPB+="$Port "
			;;

		esac
	done <<<"${portasVAR}"

	[[ ! -z $DPB ]] && echo -e $DPB

	local port_dropbear="$DPB"
	#cat /var/log/auth.log|grep "$(date|cut -d' ' -f2,3)" > /var/log/authday.log
	cat /var/log/auth.log | tail -1000 >/var/log/authday.log
	local log=/var/log/authday.log
	local loginsukses='Password auth succeeded'
	[[ -z $port_dropbear ]] && return 1
	for port in $(echo $port_dropbear); do
		for pidx in $(ps ax | grep dropbear | grep "$port" | awk -F" " '{print $1}'); do
			pids="${pids}$pidx\n"
		done
	done
	for pid in $(echo -e "$pids"); do
		pidlogs=$(grep $pid $log | grep "$loginsukses" | awk -F" " '{print $3}')
		i=0
		for pidend in $pidlogs; do
			let i++
		done
		if [[ $pidend ]]; then
			login=$(grep $pid $log | grep "$pidend" | grep "$loginsukses")
			PID=$pid
			user=$(echo $login | awk -F" " '{print $10}' | sed -r "s/'//g")
			waktu=$(echo $login | awk -F" " '{print $2"-"$1,$3}')
			[[ -z $user ]] && continue
			echo "$user|$PID|$waktu"
		fi
	done
}

openvpn_pids() {
	#nome|#loguin|#rcv|#snd|#time
	byte() {
		while read B dummy; do
			[[ "$B" -lt 1024 ]] && echo "${B} bytes" && break
			KB=$(((B + 512) / 1024))
			[[ "$KB" -lt 1024 ]] && echo "${KB} Kb" && break
			MB=$(((KB + 512) / 1024))
			[[ "$MB" -lt 1024 ]] && echo "${MB} Mb" && break
			GB=$(((MB + 512) / 1024))
			[[ "$GB" -lt 1024 ]] && echo "${GB} Gb" && break
			echo $(((GB + 512) / 1024)) terabytes
		done
	}
	for user in $(mostrar_usuarios); do
		user="$(echo $user | sed -e 's/[^a-z0-9 -]//ig')"
		[[ ! $(sed -n "/^${user},/p" /etc/openvpn/openvpn-status.log) ]] && continue
		i=0
		unset RECIVED
		unset SEND
		unset HOUR
		while read line; do
			IDLOCAL=$(echo ${line} | cut -d',' -f2)
			RECIVED+="$(echo ${line} | cut -d',' -f3)+"
			SEND+="$(echo ${line} | cut -d',' -f4)+"
			DATESEC=$(date +%s --date="$(echo ${line} | cut -d',' -f5 | cut -d' ' -f1,2,3,4)")
			TIMEON="$(($(date +%s) - ${DATESEC}))"
			MIN=$(($TIMEON / 60)) && SEC=$(($TIMEON - $MIN * 60)) && HOR=$(($MIN / 60)) && MIN=$(($MIN - $HOR * 60))
			HOUR+="${HOR}h:${MIN}m:${SEC}s\n"
			let i++
		done <<<"$(sed -n "/^${user},/p" /etc/openvpn/openvpn-status.log)"
		RECIVED=$(echo $(echo ${RECIVED}0 | bc) | byte)
		SEND=$(echo $(echo ${SEND}0 | bc) | byte)
		HOUR=$(echo -e $HOUR | sort -n | tail -1)
		echo -e "$user|$i|$RECIVED|$SEND|$HOUR"
	done
}

err_fun() {
	case $1 in
	1)
		msg -verm "$(fun_trans "Usuario Nulo")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	2)
		msg -verm "$(fun_trans "Usuario con nombre muy corto")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	3)
		msg -verm "$(fun_trans "Usuario con nombre muy grande")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	4)
		msg -verm "$(fun_trans "Contraseña Nula")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	5)
		msg -verm "$(fun_trans "Contraseña muy corta")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	6)
		msg -verm "$(fun_trans "Contraseña muy grande")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	7)
		msg -verm "$(fun_trans "Duracion Nula")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	8)
		msg -verm "$(fun_trans "Duracion invalida utilize numeros")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	9)
		msg -verm "$(fun_trans "Duracion maxima y de un año")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	11)
		msg -verm "$(fun_trans "Limite Nulo")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	12)
		msg -verm "$(fun_trans "Limite invalido utilize numeros")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	13)
		msg -verm "$(fun_trans "Limite maximo de 999")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	14)
		msg -verm "$(fun_trans "Usuario Ya Existe")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	15)
		msg -verm "$(fun_trans "USER Y PASS Ya Existe,ejemplo De como usar: User:lacasa1 Pass:lacasa1")"
		sleep 3s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	16)
		msg -verm "$(fun_trans "HWID Nula")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	17)
		msg -verm "$(fun_trans "HWID muy corta")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	18)
		msg -verm "$(fun_trans "HWID muy grande")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	19)
		msg -verm "$(fun_trans "TOKEN Nula")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	20)
		msg -verm "$(fun_trans "TOKEN muy corta")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	21)
		msg -verm "$(fun_trans "TOKEN muy grande")"
		sleep 2s
		tput cuu1
		tput dl1
		tput cuu1
		tput dl1
		;;
	esac
}
new_user() {
	clear
	clear
	#msg -bar
	usuarios_ativos=('' $(mostrar_user))
	usuarios_pass=$(cat ${USRdatabase} | cut -d'|' -f2)
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -ama "   AGREGAR USUARIO | Ningun Usuario Registrado"
		msg -bar
	else
		msg -tit
		msg -ama "  AGREGAR USUARIO | Usuarios  Activos en Servidor"
		msg -bar
		for us in $(echo ${usuarios_ativos[@]}); do
			msg -ne "  >> Usuario: " && echo "${us}"
		done
		msg -bar
	fi
	while true; do
		msg -ne "$(fun_trans "Nombre Del Nuevo Usuario")"
		read -p ": " nomeuser
		nomeuser="$(echo $nomeuser | sed -e 's/[^a-z0-9 -]//ig')"
		if [[ -z $nomeuser ]]; then
			err_fun 1 && continue
		elif [[ "${#nomeuser}" -lt "3" ]]; then
			err_fun 2 && continue
		elif [[ "${#nomeuser}" -gt "10" ]]; then
			err_fun 3 && continue
		elif [[ "$(echo ${usuarios_ativos[@]} | grep -w "$nomeuser")" ]]; then
			err_fun 14 && continue
		fi
		break
	done
	while true; do
		msg -ne "$(fun_trans "Contraseña Del Nuevo Usuario")"
		read -p ": " senhauser
		if [[ -z $senhauser ]]; then
			err_fun 4 && continue
		elif [[ "${#senhauser}" -lt "3" ]]; then
			err_fun 5 && continue
		elif [[ "${#senhauser}" -gt "10" ]]; then
			err_fun 6 && continue
			#   elif [[ "$(echo ${usuarios_pass[@]}|grep -w "$senhauser")" ]]; then
			#   err_fun 15 && continue
		fi
		break
	done
	while true; do
		msg -ne "$(fun_trans "Tiempo de Duracion del Nuevo Usuario")"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			err_fun 9 && continue
		fi
		break
	done
	while true; do
		msg -ne "$(fun_trans "Limite de Conexiones del Nuevo Usuario")"
		read -p ": " limiteuser
		if [[ -z "$limiteuser" ]]; then
			err_fun 11 && continue
		elif [[ "$limiteuser" != +([0-9]) ]]; then
			err_fun 12 && continue
		elif [[ "$limiteuser" -gt "999" ]]; then
			err_fun 13 && continue
		fi
		break
	done
	echo ""
	clear

	add_user "${nomeuser}" "${senhauser}" "${diasuser}" "${limiteuser}" #&& msg -ama "$(fun_trans "            Usuario Creado con Exito")" || msg -verm "$(fun_trans "         Error, Usuario no creado")"

	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

menu_crearuser() {
	clear
	#msg -bar
	msg -tit
	msg -ama " \e[1;33m[1] \e[37mCREAR CUENTA NORMAL \e[0m \n \e[1;33m[2] \e[37mCREAR CUENTA HWID \e[0m\n \e[1;33m[3] \e[37mCREAR CUENTA TOKEN \e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
	msg -bar
	read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
	case $cuen in
	1) new_user ;;
	2) new_hwid ;;
	3) new_token ;;
	0) ${SCPusr}/usercodes ;;
	esac

}

remove_user() {
	clear
	clear
	msg -bar
	#usuarios_ativos=($(mostrar_usuarios))
	usuarios_ativos=('' $(mostrar_user))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -verm "$(fun_trans "Ningun usuario registrado")"
		msg -bar
		return 1
	else
		msg -ama "$(fun_trans "	Usuarios SSH Activos")"
		msg -bar
		dat_us=$(printf '%-17s%-7s' 'USUARIO' 'CONTRASEÑA')
		msg -azu "  \e[1;97m\e[1;100m$dat_us"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			if [[ -e "/etc/VPS-MX/passw/$us" ]]; then
				pass=$(cat /etc/VPS-MX/passw/$us)
			else
				pass="Null"
			fi
			#[[ -z $(cat ${USRdatabase}|grep -w "${us}") ]] && pass="" || pass="$(cat ${USRdatabase}|grep -w "${us}"|cut -d'|' -f2)"
			user=$(printf '%-17s' "${us}")
			pas=$(printf '%-7s' "$pass")
			msg -ne "[$i] " && echo -e "\033[1;37m${user}\e[92m$pas"
			let i++
		done
		msg -bar
	fi
	msg -bra "$(fun_trans " [0] VOLVER")"
	msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
	msg -ama "\033[1;31mSe recomienda desbloquear todas las cuentas \nbloqueadas antes de borrar algun usuario."
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione Una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		usuario_del="${usuarios_ativos[$selection]}"
	else
		usuario_del="$selection"
	fi
	[[ -z $usuario_del ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$usuario_del") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}

	msg -ama "$(fun_trans "Usuario Seleccionado"):\e[31m $usuario_del"
	pkill -u $usuario_del
	droplim=$(droppids | grep -w "$usuario_del" | awk '{print $2}')
	kill -9 $droplim &>/dev/null
	rm_user "$usuario_del"
	rm -rf /etc/VPS-MX/VPS-MX-userlock
	rm -rf /etc/VPS-MX/controlador/Limiter.log
	unlockall2 &>/dev/null
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

lll="/usr/local/megat" && [[ ! -d ${lll} ]] && exit

remove_hwid() {
	clear
	clear
	red=$(tput setaf 1)
	gren=$(tput setaf 2)
	yellow=$(tput setaf 3)
	msg -bar
	usuarios_ativos=('' $(mostrar_hwid))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -verm "$(fun_trans "Ningun usuario HWID")"
		msg -bar
		return 1
	else
		msg -ama "$(fun_trans "	Usuarios HWID Activos")"
		msg -bar
		dat_us=$(printf '%-33s%-7s' 'USUARIO' 'NOMBRE')
		msg -azu "  \e[1;97m\e[1;100m$dat_us"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do

			[[ -z $(cat ${USRdatabaseh} | grep -w "${us}") ]] && nombre="" || nombre="$(cat ${USRdatabaseh} | grep -w "${us}" | cut -d' ' -f2)"
			user=$(printf '%-33s' "${us}")
			pas=$(printf '%-7s' "$nombre")
			msg -ne "[$i] " && echo -e "\033[1;37m${user}\e[92m$pas"
			let i++
		done
		msg -bar
	fi
	msg -bra "$(fun_trans " [0] VOLVER")"
	msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
	msg -ama "\033[1;31mSe recomienda desbloquear todas las cuentas \nbloqueadas antes de borrar algun usuario."
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione Una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		usuario_del="${usuarios_ativos[$selection]}"
	else
		usuario_del="$selection"
	fi
	[[ -z $usuario_del ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$usuario_del") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}

	msg -ama "$(fun_trans "Usuario Seleccionado"):\e[31m $usuario_del"
	pkill -u $usuario_del
	droplim=$(droppids | grep -w "$usuario_del" | awk '{print $2}')
	kill -9 $droplim &>/dev/null
	rm_hwid "$usuario_del"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
remove_token() {
	clear
	clear
	red=$(tput setaf 1)
	gren=$(tput setaf 2)
	yellow=$(tput setaf 3)
	msg -bar
	usuarios_ativos=('' $(mostrar_token))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -verm "$(fun_trans "Ningun usuario TOKEN")"
		msg -bar
		return 1
	else
		msg -ama "$(fun_trans "	Usuarios TOKEN Activos")"
		msg -bar
		dat_us=$(printf '%-18s%-7s' 'USUARIO' 'NOMBRE')
		msg -azu "  \e[1;97m\e[1;100m$dat_us"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			[[ -z $(cat ${tokens} | grep -w "${us}") ]] && nombre="" || nombre="$(cat ${tokens} | grep -w "${us}" | cut -d' ' -f2)"
			user=$(printf '%-17s' "${us}")
			pas=$(printf '%-7s' "$nombre")
			msg -ne "[$i] " && echo -e "\033[1;37m${user}\e[92m$pas"
			let i++
		done
		msg -bar
	fi
	msg -bra "$(fun_trans " [0] VOLVER")"
	msg -ama "$(fun_trans "Escriba o Seleccione un Usuario")"
	msg -ama "\033[1;31mSe recomienda desbloquear todas las cuentas \nbloqueadas antes de borrar algun usuario."
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione Una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		usuario_del="${usuarios_ativos[$selection]}"
	else
		usuario_del="$selection"
	fi
	[[ -z $usuario_del ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$usuario_del") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}

	msg -ama "$(fun_trans "Usuario Seleccionado"):\e[31m $usuario_del"
	pkill -u $usuario_del
	droplim=$(droppids | grep -w "$usuario_del" | awk '{print $2}')
	kill -9 $droplim &>/dev/null
	rm_token "$usuario_del"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

menudel() {
	clear
	#msg -bar
	msg -tit
	msg -ama " \e[1;33m[1] \e[1;37mREMOVER CUENTAS SSH  \n \e[1;33m[2] \e[1;37mREMOVER CUENTAS HWID\n \e[1;33m[3] \e[1;37mREMOVER CUENTAS TOKEN\n \e[1;31m[0] \e[1;37m<- VOLVER"
	msg -bar
	read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
	case $cuen in
	1) remove_user ;;
	2) remove_hwid ;;
	3) remove_token ;;
	0) ${SCPusr}/usercodes ;;
	esac
}

renew_user() {
	clear
	clear
	#msg -bar
	usuarios_ativos=('' $(mostrar_user))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -verm "$(fun_trans " RENOVAR USUARIO SSH| Ningun usuario registrado")"
		msg -bar
		return 1
	else
		msg -tit
		msg -ama "$(fun_trans " RENOVAR USUARIO SSH| Usuarios Activos en el Servidor")"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
			let i++
		done
		msg -bar
	fi
	msg -ama "$(fun_trans "Escriba o seleccione un Usuario")"
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1
		tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		useredit="${usuarios_ativos[$selection]}"
	else
		useredit="$selection"
	fi
	[[ -z $useredit ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$useredit") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	while true; do
		msg -ne "Nuevo Tiempo de Duracion de:\033[1;37m $useredit\e[33m"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			echo -e '\n\n\n'
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			echo -e '\n\n\n'
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			echo -e '\n\n\n'
			err_fun 9 && continue
		fi
		break
	done
	msg -bar
	renew_user_fun "${useredit}" "${diasuser}" #&& msg -ama "$(fun_trans "Usuario Modificado Con Exito")" || msg -verm "$(fun_trans "Error, Usuario no Modificado")"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
renew_hwid() {
	clear
	clear
	#msg -bar
	usuarios_ativos=('' $(mostrar_hwid))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -verm "$(fun_trans " RENOVAR USUARIO HWID | Ningun usuario registrado")"
		msg -bar
		return 1
	else
		msg -tit
		msg -ama "$(fun_trans " RENOVAR USUARIO HWID | Usuarios Activos en el Servidor")"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			pass=$(cat "/etc/passwd" | grep -w "$us" | awk -F ':' '{print $5}' | cut -d ',' -f2)
			[[ "${#pass}" -gt '11' ]] && pass="????"

			pass="$(printf '%-3s' "$pass")"

			cliente="$(msg -verd "$i")$(msg -verm2 ">")$(msg -azu "${us}")"
			nombre="\e[1;55m${pass}"
			echo -e "$cliente $nombre"
			#msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
			let i++
		done
		msg -bar
	fi
	msg -ama "$(fun_trans "Escriba o seleccione un Usuario")"
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1
		tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		useredit="${usuarios_ativos[$selection]}"
	else
		useredit="$selection"
	fi
	[[ -z $useredit ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$useredit") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	while true; do
		msg -ne "Nuevo Tiempo de Duracion de:\033[1;37m $useredit\e[33m"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			echo -e '\n\n\n'
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			echo -e '\n\n\n'
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			echo -e '\n\n\n'
			err_fun 9 && continue
		fi
		break
	done
	msg -bar
	renovar_hwid "${useredit}" "${diasuser}"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
renew_token() {
	clear
	clear
	#msg -bar
	usuarios_ativos=('' $(mostrar_token))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -verm "$(fun_trans " RENOVAR USUARIO TOKEN| Ningun usuario registrado")"
		msg -bar
		return 1
	else
		msg -tit
		msg -ama "$(fun_trans " REMOVAR USUARIO TOKEN | Usuarios Activos en el Servidor")"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			pass=$(cat "/etc/passwd" | grep -w "$us" | awk -F ':' '{print $5}' | cut -d ',' -f2)
			[[ "${#pass}" -gt '11' ]] && pass="????"
			pass="$(printf '%-3s' "$pass")"

			cliente="$(msg -verd "$i")$(msg -verm2 ">")$(msg -azu "${us}")"
			nombre="\e[1;55m${pass}"
			echo -e "$cliente $nombre"
			#msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
			let i++
		done
		msg -bar
	fi
	msg -ama "$(fun_trans "Escriba o seleccione un Usuario")"
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1
		tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		useredit="${usuarios_ativos[$selection]}"
	else
		useredit="$selection"
	fi
	[[ -z $useredit ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$useredit") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	while true; do
		msg -ne "Nuevo Tiempo de Duracion de:\033[1;37m $useredit\e[33m"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			echo -e '\n\n\n'
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			echo -e '\n\n\n'
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			echo -e '\n\n\n'
			err_fun 9 && continue
		fi
		break
	done
	msg -bar
	renovar_token "${useredit}" "${diasuser}"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
menu_renova() {
	clear
	#msg -bar
	msg -tit
	msg -ama " \e[1;33m[1] \e[1;37mRENOVAR CUENTAS SSH  \n \e[1;33m[2] \e[1;37mRENOVAR CUENTAS HWID\n \e[1;33m[3] \e[1;37mRENOVAR CUENTAS TOKEN\n \e[1;31m[0] \e[1;37m<- VOLVER"
	msg -bar
	read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
	case $cuen in
	1) renew_user ;;
	2) renew_hwid ;;
	3) renew_token ;;
	0) ${SCPusr}/usercodes ;;
	esac
}
[[ ! -d /usr/local/libreria ]] && exit
edit_user() {
	clear
	clear
	#msg -bar
	usuarios_ativos=('' $(mostrar_user))
	if [[ -z ${usuarios_ativos[@]} ]]; then
		msg -tit
		msg -verm "$(fun_trans " EDITTAR USER | Ningun usuario registrado")"
		msg -bar
		return 1
	else
		msg -tit
		msg -ama "$(fun_trans " EDITTAR USER | Usuarios Activos del Servidor")"
		msg -bar
		i=1
		for us in $(echo ${usuarios_ativos[@]}); do
			msg -ne "[$i] ->" && echo -e "\033[1;33m ${us}"
			let i++
		done
		msg -bar
	fi
	msg -ama "$(fun_trans "Escriba o seleccione un Usuario")"
	msg -bar
	unset selection
	while [[ -z ${selection} ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1
		tput dl1
	done
	if [[ ! $(echo "${selection}" | egrep '[^0-9]') ]]; then
		useredit="${usuarios_ativos[$selection]}"
	else
		useredit="$selection"
	fi
	[[ -z $useredit ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	[[ ! $(echo ${usuarios_ativos[@]} | grep -w "$useredit") ]] && {
		msg -verm "$(fun_trans "Error, Usuario Invalido")"
		msg -bar
		return 1
	}
	while true; do
		msg -ne "$(fun_trans "Usuario Seleccionado"): " && echo -e "$useredit"
		msg -ne "Nueva Contraseña de:\033[1;33m $useredit"
		read -p ": " senhauser
		if [[ -z "$senhauser" ]]; then
			err_fun 4 && continue
		elif [[ "${#senhauser}" -lt "3" ]]; then
			err_fun 5 && continue
		elif [[ "${#senhauser}" -gt "10" ]]; then
			err_fun 6 && continue
		fi
		break
	done
	while true; do
		msg -ne "Dias de Duracion de:\033[1;33m $useredit"
		read -p ": " diasuser
		if [[ -z "$diasuser" ]]; then
			err_fun 7 && continue
		elif [[ "$diasuser" != +([0-9]) ]]; then
			err_fun 8 && continue
		elif [[ "$diasuser" -gt "360" ]]; then
			err_fun 9 && continue
		fi
		break
	done
	while true; do
		msg -ne "Nuevo Limite de Conexion de:\033[1;33m $useredit"
		read -p ": " limiteuser
		if [[ -z "$limiteuser" ]]; then
			err_fun 11 && continue
		elif [[ "$limiteuser" != +([0-9]) ]]; then
			err_fun 12 && continue
		elif [[ "$limiteuser" -gt "999" ]]; then
			err_fun 13 && continue
		fi
		break
	done
	echo ""
	msg -bar
	edit_user_fun "${useredit}" "${senhauser}" "${diasuser}" "${limiteuser}" #&& msg -ama "$(fun_trans "Usuario Modificado Con Exito")" && rm -rf ${SCPusr}/Limiter.log || msg -verm "$(fun_trans "Error, Usuario nao Modificado")"
	msg -ne "$(fun_trans " >> Usuario"): " && echo -e "$useredit"
	msg -ne "$(fun_trans " >> Contraseña"): " && echo -e "$senhauser"
	msg -ne "$(fun_trans " >> Dias de Duracion"): " && echo -e "$diasuser"
	msg -ne "$(fun_trans " >> Fecha de Expiracion"): " && echo -e "$(date "+%F" -d " + $diasuser days")"
	msg -ne "$(fun_trans " >> Limite de Conexion"): " && echo -e "$limiteuser"
	msg -bar

	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
data_hwid() {
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        INFORMACION DE USUARIOS HWID REGISTRADOS ")"
	msg -bar
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'hwid' | grep -v 'syslog')

	dat_us=$(printf '%-30s%-7s%-6s%s' 'CLIENTE' 'NONBRE' 'DIAS' 'STATUS')
	msg -azu "  \e[1;97m\e[1;100m$dat_us"
	msg -bar

	i=1
	for u in $(echo "${cat_users}" | awk -F ':' '{print $1}'); do

		fix_hwid_token=$(echo "${cat_users}" | grep -w "$u" | awk -F ':' '{print $5}' | cut -d ',' -f1) && [[ "${fix_hwid_token}" != @(hwid) ]] && continue

		fecha=$(chage -l "$u" | sed -n '4p' | awk -F ': ' '{print $2}')

		mes_dia=$(echo $fecha | awk -F ',' '{print $1}' | sed 's/ //g')
		ano=$(echo $fecha | awk -F ', ' '{printf $2}' | cut -c 3-)
		us=$(printf '%-1s' "$u")

		pass=$(cat "/etc/passwd" | grep -w "$u" | awk -F ':' '{print $5}' | cut -d ',' -f2)
		[[ "${#pass}" -gt '12' ]] && pass="????"
		pass="$(printf '%-3s' "$pass")"

		unset stat
		if [[ $(passwd --status $u | cut -d ' ' -f2) = "P" ]]; then
			stat="$(msg -verd "📡 ")"
		else
			stat="$(msg -verm2 "📵 ")"
		fi

		cliente="$(msg -verd "$i")$(msg -verm2 ">")$(msg -azu "${u}")"
		if [[ $(echo $fecha | awk '{print $2}') = "" ]]; then
			exp="$(printf '%-2s' '[XX]')"
			#exp+="$(printf '%-2s' '[X]')"
			#vig="$(msg -verm2 "$fecha")$(msg -verm2 "$exp") $(echo -e "$stat")"
			vig="$(msg -verm2 "$exp")   $(echo -e "$stat")"
		else
			if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
				exp="$(printf '%-2s' "Exp")"
				#echo " $(msg -verm2 "$fecha")$(msg -verd "$exp") $(echo -e "$stat")"
				echo " $(msg -verm2 "$exp")   $(echo -e "$stat")"
			else
				EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
				if [[ "${#EXPTIME}" = "1" ]]; then
					exp="$(printf '%-2s' "[$EXPTIME]")"
				elif [[ "${#EXPTIME}" = "2" ]]; then
					exp="$(printf '%-2s' "[$EXPTIME]")"
				else
					exp="$(printf '%-2s' "[$EXPTIME]")"
				fi
				#vig="$(msg -verm2 "$mes_dia/$ano")$(msg -verd "$exp")$(echo -e "$stat")"
				vig=" $(msg -verd "$exp")   $(echo -e "$stat")"
			fi
		fi
		nombre="\e[1;55m${pass}"
		echo -e "$cliente $nombre $vig"
		msg -bar3
		let i++
	done
	#  tput cuu1 && tput dl1
	msg -bar

}
data_token() {
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        INFORMACION DE USUARIOS TOKEN REGISTRADOS ")"
	msg -bar
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'token' | grep -v 'syslog')

	dat_us=$(printf '%-16s%-11s%-7s%-6s%s' 'CLIENTE' 'NOMBRE' 'FECHA' 'DIAS' 'STATUS')
	msg -ama "    \e[1;97m\e[1;100m$dat_us"
	msg -bar

	i=1
	for u in $(echo "${cat_users}" | awk -F ':' '{print $1}'); do

		fix_hwid_token=$(echo "${cat_users}" | grep -w "$u" | awk -F ':' '{print $5}' | cut -d ',' -f1) && [[ "${fix_hwid_token}" != @(token) ]] && continue

		echo -e "  \e[1;93mContraseña General: \e[1;94m$(cat /etc/VPS-MX/.passwd)\e[0m"
		msg -bar
		fecha=$(chage -l "$u" | sed -n '4p' | awk -F ': ' '{print $2}')

		mes_dia=$(echo $fecha | awk -F ',' '{print $1}' | sed 's/ //g')
		ano=$(echo $fecha | awk -F ', ' '{printf $2}' | cut -c 3-)
		us=$(printf '%-3s' "$u")

		user=$(cat "/etc/passwd" | grep -w "$u" | awk -F ':' '{print $5}' | cut -d ',' -f2)
		[[ "${#user}" -gt '12' ]] && user="????"
		user="$(printf '%-9s' "$user")"

		unset stat
		if [[ $(passwd --status $u | cut -d ' ' -f2) = "P" ]]; then
			stat="$(msg -verd "📡 ")"
		else
			stat="$(msg -verm2 "📵 ")"
		fi

		cliente="$(msg -verd "$i")$(msg -verm2 "-")$(msg -ama " ${u}")"
		if [[ $(echo $fecha | awk '{print $2}') = "" ]]; then
			exp="$(printf '%-6s' '[X]')"
			#exp+="$(printf '%-4s' '[X]')"
			vig=" $(msg -verm2 "$fecha")$(msg -verm2 "$exp")  $(echo -e "$stat")"
		else
			if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
				exp="$(printf '%-6s' "Exp")"
				vig="$(msg -verm2 "$mes_dia/$ano")$(msg -verm2 "$exp")  $(echo -e "$stat")"
			else
				EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
				if [[ "${#EXPTIME}" = "1" ]]; then
					exp="$(printf '%-6s' " [$EXPTIME]")"
				elif [[ "${#EXPTIME}" = "2" ]]; then
					exp="$(printf '%-6s' " [$EXPTIME]")"
				else
					exp="$(printf '%-6s' " [$EXPTIME]")"
				fi
				vig="$(msg -verm2 "$mes_dia/$ano")$(msg -verd "$exp")  $(echo -e "$stat")"
			fi
		fi

		nombre="$(msg -verd "${user}")"
		echo -e "$cliente $nombre $vig"
		msg -bar3
		let i++
	done
	#  tput cuu1 && tput dl1
	msg -bar

}
data_user() {
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        INFORMACION DE USUARIOS SSH REGISTRADOS ")"
	msg -bar2
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'false' | grep -v 'syslog')
	#dat_us=$(printf '%-11s%-13s%-15s%-4s%-6s%s' 'Usuario' 'Contraseña' ' Fecha' 'Dia' 'Limit' 'Status')
	dat_us=" Usuario  Contraseña    Fecha  Dia  Limit Status"
	msg -ama "  \e[1;97m\e[1;100m$dat_us"
	msg -bar

	i=1
	for u in $(echo "${cat_users}" | awk -F ':' '{print $1}'); do

		fix_hwid_token=$(echo "${cat_users}" | grep -w "$u" | awk -F ':' '{print $5}' | cut -d ',' -f1) && [[ "${fix_hwid_token}" = @(hwid|token) ]] && continue

		fecha=$(chage -l "$u" | sed -n '4p' | awk -F ': ' '{print $2}')
		#fecha=$(cat ${USRdatabase}|grep -w "$u"|cut -d'|' -f3)
		mes_dia=$(echo $fecha | awk -F ',' '{print $1}' | sed 's/ //g')
		ano=$(echo $fecha | awk -F ', ' '{printf $2}' | cut -c 3-)
		us=$(printf '%-9s' "$u")
		if [[ -e "/etc/VPS-MX/passw/$u" ]]; then
			pass=$(cat /etc/VPS-MX/passw/$u)
		else
			pass="Null"
		fi
		#pass=$(cat /etc/VPS-MX/VPS-MXuser|grep -w "$u"|cut -d'|' -f2)
		#pass=$(cat "/etc/passwd"|grep -w "$u"|awk -F ':' '{print $5}'|cut -d ',' -f2)
		#[[ "${#pass}" -gt '12' ]] && pass="duplicada"
		pass="$(printf '%-10s' "$pass")"

		unset stat
		if [[ $(passwd --status $u | cut -d ' ' -f2) = "P" ]]; then
			stat="$(msg -verd "📡 ")"
		else
			stat="$(msg -verm2 "📵 ")"
		fi

		Limit=$(cat /etc/VPS-MX/VPS-MXuser | grep -w "$u" | cut -d' ' -f3)
		#Limit=$(cat "/etc/passwd"|grep -w "alex"|awk -F ':' '{print $5}'|cut -d ',' -f2)
		[[ "${#Limit}" = "1" ]] && Limit=$(printf '%3s' "$Limit") || Limit=$(printf '%-3s' "$Limit")

		echo -ne "$(msg -verd "$i")$(msg -verm2 ">")$(msg -azu "${us}") $(msg -azu "${pass}")"
		if [[ $(echo $fecha | awk '{print $2}') = "" ]]; then
			#exp="$(printf '%8s%-2s' '[X]')"
			exp="$(printf '%-5s' '[X]')"
			echo " $(msg -verm2 "$fecha")$(msg -verd "$exp")    $(echo -e "$stat")"
		else
			if [[ $(date +%s) -gt $(date '+%s' -d "${fecha}") ]]; then
				exp="$(printf '%-5s' "Exp")"
				echo " $(msg -verm2 "$mes_dia/$ano")  $(msg -verm2 "$exp")$(msg -ama "$Limit")    $(echo -e "$stat")"
			else
				EXPTIME="$(($(($(date '+%s' -d "${fecha}") - $(date +%s))) / 86400))"
				[[ "${#EXPTIME}" = "1" ]] && exp="$(printf '%-5s' "$EXPTIME")" || exp="$(printf '%-5s' "$EXPTIME")"
				echo " $(msg -verm2 "$mes_dia/$ano")  $(msg -verd "$exp")$(msg -ama "$Limit")    $(echo -e "$stat")"
			fi
		fi

		let i++
	done
	msg -bar

}
menudata() {
	clear
	#msg -bar
	msg -tit
	msg -ama " \e[1;33m[1] \e[37mDETALLES DE CUENTAS SSH \e[0m\n \e[1;33m[2] \e[37mDETALLES DE CUENTAS HWID \e[0m\n \e[1;33m[3] \e[37mDETALLES DE CUENTAS TOKEN \e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
	msg -bar
	read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
	case $cuen in
	1)
		data_user && msg -ne " Enter Para Continuar" && read enter
		${SCPusr}/usercodes
		;;
	2)
		data_hwid && msg -ne " Enter Para Continuar" && read enter
		${SCPusr}/usercodes
		;;
	3)
		data_token && msg -ne " Enter Para Continuar" && read enter
		${SCPusr}/usercodes
		;;
	0) ${SCPusr}/usercodes ;;
	esac
}

fun_drop() {
	port_dropbear=$(ps aux | grep dropbear | awk NR==1 | awk '{print $17;}')
	log=/var/log/auth.log
	loginsukses='Password auth succeeded'
	clear
	pids=$(ps ax | grep dropbear | grep " $port_dropbear" | awk -F" " '{print $1}')
	for pid in $pids; do
		pidlogs=$(grep $pid $log | grep "$loginsukses" | awk -F" " '{print $3}')
		i=0
		for pidend in $pidlogs; do
			let i=i+1
		done
		if [ $pidend ]; then
			login=$(grep $pid $log | grep "$pidend" | grep "$loginsukses")
			PID=$pid
			user=$(echo $login | awk -F" " '{print $10}' | sed -r "s/'/ /g")
			waktu=$(echo $login | awk -F" " '{print $2"-"$1,$3}')
			while [ ${#waktu} -lt 13 ]; do
				waktu=$waktu" "
			done
			while [ ${#user} -lt 16 ]; do
				user=$user" "
			done
			while [ ${#PID} -lt 8 ]; do
				PID=$PID" "
			done
			echo "$user $PID $waktu"
		fi
	done
}

menumoni() {
	clear
	#msg -bar
	msg -tit
	msg -ama " \e[1;33m[1] \e[37mMONITOR DE CUENTAS SSH\e[0m\n \e[1;33m[2] \e[37mMONITOR DE CUENTAS HWID\e[0m\n \e[1;33m[3] \e[37mMONITOR DE CUENTAS TOKEN\e[0m\n \e[1;31m[0] \e[1;37m<- VOLVER"
	msg -bar
	read -p " $(echo -e "\e[1;37mSeleccione Una Opcion [1/3]:\e[1;33m") " cuen
	case $cuen in
	1) monit_ssh ;;
	2) monit_hwid ;;
	3) monit_token ;;
	0) ${SCPusr}/usercodes ;;
	esac
}

ts_get_sec() {
	read -r h m s <<<$(echo $1 | tr ':' ' ')
	[[ $h = @(08|09) ]] && h=$(echo ${s:1})
	[[ $m = @(08|09) ]] && m=$(echo ${s:1})
	[[ $s = @(08|09) ]] && s=$(echo ${s:1})
	echo $(((h * 60 * 60) + (m * 60) + s))
}
export numero='^[0-9]+$'
export letra='^[A-Za-z]+$'
export tx_num='^[A-Za-z0-9]+$'

ts_get_con() {
	declare -A conect
	mesdia=$(date | cut -d' ' -f2,3)
	if [[ $(echo ${mesdia:0:2}) =~ $numero ]]; then
		mes=$(echo "$mesdia" | cut -d ' ' -f2)
		dia=$(echo "$mesdia" | cut -d ' ' -f1)
		mesdia="$mes $dia"
	fi
	cat /var/log/auth.log | grep "$mesdia" >/var/log/authday.log
	logins="$(cat /var/log/authday.log | grep -v root | grep 'dropbear\|sshd' | grep -w 'Password auth succeeded\|Accepted password for')"
	[[ -z ${logins} ]] && return
	while read line; do
		if [[ $(echo "$line" | grep -w 'dropbear') ]]; then
			data=$(echo "$line" | cut -d ' ' -f3,5,10 | sed "s/]:\|'//g" | sed 's/\[/ /g')
		elif [[ $(echo "$line" | grep 'sshd') ]]; then
			data=$(echo "$line" | cut -d ' ' -f3,5,9 | sed 's/]://g' | sed 's/\[/ /g')
		fi
		pid=$(echo "$data" | cut -d ' ' -f3)
		timeOut=$(cat /var/log/authday.log | grep "$pid" | grep 'Exit\|closed' | cut -d ' ' -f3)
		[[ -z ${timeOut} ]] && timeOut='open'
		start_ts="$(echo "$data" | cut -d ' ' -f1)"
		if [[ "${timeOut}" = 'open' ]]; then
			stop_ts="$(printf '%(%H:%M:%S)T')"
		else
			stop_ts="${timeOut}"
		fi
		START=$(ts_get_sec $start_ts)
		STOP=$(ts_get_sec $stop_ts)

		if [[ $START -gt $STOP ]]; then
			DIFF=$((START - STOP))
		else
			DIFF=$((STOP - START))
		fi
		h="$((DIFF / 60 / 60))" && [[ "${#h}" = 1 ]] && h="0$h"
		m="$((DIFF / 60 % 60))" && [[ "${#m}" = 1 ]] && m="0$m"
		s="$((DIFF % 60))" && [[ "${#s}" = 1 ]] && s="0$s"
		tiempo="$h:$m:$s"
		name=$(echo "$data" | cut -d ' ' -f4)
		conect["${name}"]="${data} ${timeOut} ${tiempo}"
	done <<<$(echo "${logins}")
	printf "%s\n" "${conect[@]}"
}

monit_ssh() {
	clear
	[[ $(dpkg --get-selections | grep -w "net-tools" | head -1) ]] || apt-get install net-tools -y &>/dev/null
	cab=$(printf '%-15s%-13s%-15s%-7s' 'USUARIO' 'STATUS' 'CONEXIONES' 'TIEMPO')
	msg -bar
	echo -e "\E[91m \e[43m $cab\E[0m"
	msg -bar
	#  msg -ama "Analizando usuarios..."
	# ts_conect_user=$(ts_get_con)
	tput cuu1 && tput dl1
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'sshm' | grep -v 'syslog')
	for i in $(echo "$cat_users" | awk -F ':' '{print $1}'); do
		user="$i"
		#    [[ -z $(cat ${USRdatabase}|grep -w "${i}"|cut -d'|' -f4) ]] && s2ssh="" || s2ssh="$(cat ${USRdatabase}|grep -w "${i}"|cut -d'|' -f4)"
		s2ssh="$(echo "$(cat ${USRdatabase} | grep -w "${i}" | cut -d' ' -f3)")"

		if [[ "$(echo "$cat_users" | grep -w $i | wc -l)" = "1" ]]; then
			sqd="$(ps -u $user | grep sshd | wc -l)"
		else
			sqd=00
		fi

		[[ "$sqd" = "" ]] && sqd=0
		if [[ -e /etc/openvpn/openvpn-status.log ]]; then
			ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$i", | wc -l)"
		else
			ovp=0
		fi

		if netstat -nltp | grep -w 'dropbear' >/dev/null 2>&1; then
			drop="$(dropbear_pids | grep -w "$i" | wc -l)"
		else
			drop=0
		fi
		cnx=$(($sqd + $drop))
		conex=$(($cnx + $ovp))
		if [[ $cnx -gt 0 ]]; then
			tst="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			tst1=$(echo "$tst" | wc -c)
			if [[ "$tst1" == "9" ]]; then
				timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			else
				timerr="$(echo "00:$tst")"
			fi

		elif [[ $ovp -gt 0 ]]; then
			tmp2=$(printf '%(%H:%M:%S)T\n')
			tmp1="$(grep -w "$i" /etc/openvpn/openvpn-status.log | awk '{print $4}' | head -1)"
			[[ "$tmp1" = "" ]] && tmp1="00:00:00" && tmp2="00:00:00"
			var1=$(echo $tmp1 | cut -c 1-2)
			var2=$(echo $tmp1 | cut -c 4-5)
			var3=$(echo $tmp1 | cut -c 7-8)
			var4=$(echo $tmp2 | cut -c 1-2)
			var5=$(echo $tmp2 | cut -c 4-5)
			var6=$(echo $tmp2 | cut -c 7-8)
			calc1=$(echo $var1*3600 + $var2*60 + $var3 | bc)
			calc2=$(echo $var4*3600 + $var5*60 + $var6 | bc)
			seg=$(($calc2 - $calc1))
			min=$(($seg / 60))
			seg=$(($seg - $min * 60))
			hor=$(($min / 60))
			min=$(($min - $hor * 60))
			timerusr=$(printf "%02d:%02d:%02d \n" $hor $min $seg)
			timerr=$(echo "$timerusr" | sed -e 's/[^0-9:]//ig')
		else
			timerr="00:00:00"
		fi

		user=$(printf '%-16s' "$i")
		con=$(printf '%-11s' "$conex/$s2ssh")
		#msg -bar
		if [[ $conex -eq 0 ]]; then
			status=$(printf '%-16s' '[OFF]')
			#  echo ""
			# echo -e " \e[1;97m$user$(msg -verm2 "$status")$(msg -verd "$con")$(msg -ama "$timerr")"
		else
			status=$(printf '%-16s' '[ON]')

			echo -e " \e[1;97m$user$(msg -verd "$status")$(msg -verd "$con")$(msg -ama "$timerr")"
			msg -bar
		fi
		#  msg -bar
	done
	#  tput cuu1 #&& tput dl1
	#msg -bar

}
monit_hwid() {
	clear
	[[ $(dpkg --get-selections | grep -w "net-tools" | head -1) ]] || apt-get install net-tools -y &>/dev/null
	cab=$(printf '%-15s%-13s%-15s%-7s' '-HWID- ' 'STATUS' 'CONEXIONES' 'TIEMPO')
	msg -bar
	echo -e "\E[91m \e[43m $cab\E[0m"
	msg -bar
	#  msg -ama "Analizando usuarios..."
	#  ts_conect_user=$(ts_get_con)
	tput cuu1 && tput dl1
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'hwid' | grep -v 'syslog')

	for i in $(echo "$cat_users" | awk -F ':' '{print $1}'); do
		user="$i"

		if [[ "$(echo "$cat_users" | grep -w $i | wc -l)" = "1" ]]; then
			sqd="$(ps -u $user | grep sshd | wc -l)"
		else
			sqd=00
		fi

		[[ "$sqd" = "" ]] && sqd=0
		if [[ -e /etc/openvpn/openvpn-status.log ]]; then
			ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$i", | wc -l)"
		else
			ovp=0
		fi

		if netstat -nltp | grep -w 'dropbear' >/dev/null 2>&1; then
			drop="$(dropbear_pids | grep -w "$i" | wc -l)"

		#  [[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && drop="$(fun_drop|grep -w "${i}"|wc -l)"

		else
			drop=0
		fi
		cnx=$(($sqd + $drop))
		conex=$(($cnx + $ovp))
		if [[ $cnx -gt 0 ]]; then
			tst="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			tst1=$(echo "$tst" | wc -c)
			if [[ "$tst1" == "9" ]]; then
				timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			else
				timerr="$(echo "00:$tst")"
			fi

		elif [[ $ovp -gt 0 ]]; then
			tmp2=$(printf '%(%H:%M:%S)T\n')
			tmp1="$(grep -w "$i" /etc/openvpn/openvpn-status.log | awk '{print $4}' | head -1)"
			[[ "$tmp1" = "" ]] && tmp1="00:00:00" && tmp2="00:00:00"
			var1=$(echo $tmp1 | cut -c 1-2)
			var2=$(echo $tmp1 | cut -c 4-5)
			var3=$(echo $tmp1 | cut -c 7-8)
			var4=$(echo $tmp2 | cut -c 1-2)
			var5=$(echo $tmp2 | cut -c 4-5)
			var6=$(echo $tmp2 | cut -c 7-8)
			calc1=$(echo $var1*3600 + $var2*60 + $var3 | bc)
			calc2=$(echo $var4*3600 + $var5*60 + $var6 | bc)
			seg=$(($calc2 - $calc1))
			min=$(($seg / 60))
			seg=$(($seg - $min * 60))
			hor=$(($min / 60))
			min=$(($min - $hor * 60))
			timerusr=$(printf "%02d:%02d:%02d \n" $hor $min $seg)
			timerr=$(echo "$timerusr" | sed -e 's/[^0-9:]//ig')
		else
			timerr="00:00:00"
		fi

		hwid=$(printf '%-32s' "$i")
		con=$(printf '%-3s' "$conex")

		if [[ $conex -eq 0 ]]; then
			status=$(printf '%-3s' '[OFF]')
			#   msg -bar
			echo -e " \e[1;97m$hwid$(msg -verm2 "$status")$(msg -verd "$con")$(msg -ama "$timerr")"
		else
			status=$(printf '%-3s' '[ON]')
			#    msg -bar
			echo -e " \e[1;97m$hwid$(msg -verd "$status")$(msg -verd "$con")$(msg -ama "$timerr")"
		fi
		msg -bar
	done
	tput cuu1 && tput dl1
	msg -bar

}
monit_token() {
	clear
	[[ $(dpkg --get-selections | grep -w "net-tools" | head -1) ]] || apt-get install net-tools -y &>/dev/null
	cab=$(printf '%-15s%-13s%-15s%-7s' '-TOKEN-' 'STATUS' 'CONEXIONES' 'TIEMPO')
	msg -bar
	echo -e "\E[91m \e[43m $cab\E[0m"
	msg -bar
	msg -ama "Analizando usuarios..."
	#  ts_conect_user=$(ts_get_con)
	tput cuu1 && tput dl1
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'token' | grep -v 'syslog')

	for i in $(echo "$cat_users" | awk -F ':' '{print $1}'); do
		user="$i"

		if [[ "$(echo "$cat_users" | grep -w $i | wc -l)" = "1" ]]; then
			sqd="$(ps -u $user | grep sshd | wc -l)"
		else
			sqd=00
		fi

		[[ "$sqd" = "" ]] && sqd=0
		if [[ -e /etc/openvpn/openvpn-status.log ]]; then
			ovp="$(cat /etc/openvpn/openvpn-status.log | grep -E ,"$i", | wc -l)"

		else
			ovp=0
		fi

		if netstat -nltp | grep -w 'dropbear' >/dev/null 2>&1; then
			drop="$(dropbear_pids | grep -w "$i" | wc -l)"

		#  [[ $(dpkg --get-selections|grep -w "dropbear"|head -1) ]] && drop="$(fun_drop|grep -w "${i}"|wc -l)"

		else
			drop=0
		fi
		cnx=$(($sqd + $drop))
		conex=$(($cnx + $ovp))
		if [[ $cnx -gt 0 ]]; then
			tst="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			tst1=$(echo "$tst" | wc -c)
			if [[ "$tst1" == "9" ]]; then
				timerr="$(ps -o etime $(ps -u $user | grep sshd | awk 'NR==1 {print $1}') | awk 'NR==2 {print $1}')"
			else
				timerr="$(echo "00:$tst")"
			fi

		elif [[ $ovp -gt 0 ]]; then
			tmp2=$(printf '%(%H:%M:%S)T\n')
			tmp1="$(grep -w "$i" /etc/openvpn/openvpn-status.log | awk '{print $4}' | head -1)"
			[[ "$tmp1" = "" ]] && tmp1="00:00:00" && tmp2="00:00:00"
			var1=$(echo $tmp1 | cut -c 1-2)
			var2=$(echo $tmp1 | cut -c 4-5)
			var3=$(echo $tmp1 | cut -c 7-8)
			var4=$(echo $tmp2 | cut -c 1-2)
			var5=$(echo $tmp2 | cut -c 4-5)
			var6=$(echo $tmp2 | cut -c 7-8)
			calc1=$(echo $var1*3600 + $var2*60 + $var3 | bc)
			calc2=$(echo $var4*3600 + $var5*60 + $var6 | bc)
			seg=$(($calc2 - $calc1))
			min=$(($seg / 60))
			seg=$(($seg - $min * 60))
			hor=$(($min / 60))
			min=$(($min - $hor * 60))
			timerusr=$(printf "%02d:%02d:%02d \n" $hor $min $seg)
			timerr=$(echo "$timerusr" | sed -e 's/[^0-9:]//ig')
		else
			timerr="00:00:00"
		fi

		token=$(printf '%-16s' "$i")
		con=$(printf '%-8s' "$conex")
		[[ -z $(cat ${tokens} | grep -w "${i}") ]] && nombre="" || nombre="$(cat ${tokens} | grep -w "${i}" | cut -d'|' -f2)"
		nom=$(printf '%-4s' "$nombre")

		if [[ $conex -eq 0 ]]; then
			status=$(printf '%-10s' '[OFF]')
			# msg -bar
			# echo ""
			echo -e " \e[1;97m$token$nom $(msg -verm2 "$status")$(msg -verd "$con")$(msg -ama "\e[93m$timerr")"
		else
			status=$(printf '%-10s' '[ON]')
			#   msg -bar
			echo -e " \e[1;97m$token$nom $(msg -verd "$status")$(msg -verd "$con")$(msg -ama "\e[93m$timerr")"
		fi
		msg -bar
	done
	tput cuu1 && tput dl1
	msg -bar

}

rm_vencidos() {
	clear
	clear
	#msg -bar
	msg -tit
	echo -e "$(fun_trans "\e[93m           BORRANDO USUARIOS VENCIDOS ")"
	msg -bar
	red=$(tput setaf 1)
	gren=$(tput setaf 2)
	yellow=$(tput setaf 3)
	txtvar=$(printf '%-25s' " USUARIO")
	txtvar+=$(printf '%-25s' " VALIDIDEZ")
	echo -e "\033[1;92m${txtvar}"
	msg -bar
	expired="${red}$(fun_trans "Usuario Expirado")"
	valid="${gren}$(fun_trans "   Usuario Vigente")"
	never="${yellow}$(fun_trans "Usuario Ilimitado")"
	removido="${red}$(fun_trans "Eliminado")"
	DataVPS=$(date +%s)
	while read user; do
		DataUser=$(chage -l "${user}" | grep -i co | awk -F ":" '{print $2}')
		usr=$user
		while [[ ${#usr} -lt 20 ]]; do
			usr=$usr" "
		done
		[[ "$DataUser" = " never" ]] && {
			echo -e "${yellow}$usr $never"
			continue
		}
		DataSEC=$(date +%s --date="$DataUser")
		if [[ "$DataSEC" -lt "$DataVPS" ]]; then
			echo -ne "${yellow}$usr $expired"
			rm_user "$user" && echo -e "($removido)"
		else
			echo -e "${yellow}$usr $valid"
		fi
	done <<<"$(mostrar_usuarios)"
	rm -rf /etc/VPS-MX/VPS-MX-userlock
	rm -rf /etc/VPS-MX/controlador/Limiter.log
	unlockall2
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

SPR &
backup_ssh() {
	clear
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        BACKUP DE USUARIOS SSH")"
	msg -bar
	menu_func "CREAR BACKUP" "RESTAURAR BACKUP" "DESCARGAR LINK BACKUP"
	msg -bar
	unset selection
	while [[ ${selection} != @([1-3]) ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	case ${selection} in
	1)

		cp /etc/userssh $HOME/VPS-MX-Backup
		cp /etc/userssh /var/www/html/VPS-MX-Backup
		msg -azu "$(fun_trans "Procedimiento Hecho con Exito, Guardado en:")"
		echo ""
		echo -e "\033[1;31mBACKUP > [\033[1;32m$HOME/VPS-MX-Backup\033[1;31m]"
		echo -e "\033[1;31mBACKUP LINK > [\033[1;32mhttp://$IP:81/VPS-MX-Backup\033[1;31m]"
		echo ""
		;;
	2)
		while [[ ! -e ${dirbackup} ]]; do
			echo -ne "\033[1;37m ¡¡Recomiendo DESACTIVAR Limitador si es que lo tiene ACTIVO!!\n"
			echo -ne "\033[1;37m Escriba la ubicacion de la copia de seguridad\n"
			msg -bar
			echo -ne "\033[1;37m ENTER: para ruta predeterminada /root/VPS-MX-Backup: " && read dirbackup
			echo ""
			echo "----------  RESTAURANDO CUENTAS ESPERE "
			echo ""
			msg -bar
			[[ -z "${dirbackup}" ]] && dirbackup="/root/VPS-MX-Backup"
			tput cuu1 && tput dl1
		done
		VPSsec=$(date +%s)
		while read line; do
			nome=$(echo ${line} | cut -d' ' -f1)
			[[ $(echo $(mostrar_user) | grep -w "$nome") ]] && {
				msg -verm "$nome [ERROR]"
				continue
			}
			senha=$(echo ${line} | cut -d' ' -f2)
			DateExp=$(echo ${line} | cut -d' ' -f3)
			DataSec=$(date +%s --date="$DateExp")
			[[ "$VPSsec" -lt "$DataSec" ]] && dias="$(($(($DataSec - $VPSsec)) / 86400))" || dias="NP"
			limite=$(echo ${line} | cut -d' ' -f4)

			add_user "$nome" "$senha" "$dias" "$limite" &>/dev/null && msg -verd "$nome [CUENTA VALIDA]" || msg -verm "$nome [CUENTA INVALIDA FECHA EXPIRADA]"
		done <${dirbackup}
		;;
	3)
		msg -bar
		msg -ama "	DESCARGAR LINK DE BACKUP"
		msg -bar
		msg -ne " Ingrese Su Link: "
		read link
		wget -O $HOME/VPS-MX-Backup $link &>/dev/null
		echo ""
		msg -ama " LINK DESCARGADO CON EXITO\n AHORA VUELVE A REGRESAR EN LA OPCION DE RESTAURAR BACKUP\n Opcion 11 despues opcion 2 Restaurar Backup"
		msg -bar
		;;
	esac
	echo ""
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
backup_hwid() {
	clear
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        BACKUP DE USUARIOS HWID")"
	msg -bar
	menu_func "CREAR BACKUP" "RESTAURAR BACKUP" "DESCARGAR LINK BACKUP"
	msg -bar
	unset selection
	while [[ ${selection} != @([1-3]) ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	case ${selection} in
	1)
		cp ${USRdatabaseh} $HOME/Backup-HWID
		cp ${USRdatabaseh} /var/www/html/Backup-HWID
		msg -azu "$(fun_trans "Procedimiento Hecho con Exito, Guardado en:")"
		echo ""
		echo -e "\033[1;31mBACKUP > [\033[1;32m$HOME/Backup-HWID\033[1;31m]"
		echo -e "\033[1;31mBACKUP LINK > [\033[1;32mhttp://$IP:81/Backup-HWID\033[1;31m]"
		echo ""
		;;
	2)
		while [[ ! -e ${dirbackuph} ]]; do
			echo -ne "\033[1;37m ¡¡Recomiendo DESACTIVAR Limitador si es que lo tiene ACTIVO!!\n"
			echo -ne "\033[1;37m Escriba la ubicacion de la copia de seguridad\n"
			msg -bar
			echo -ne "\033[1;37m ENTER: para ruta predeterminada /root/Backup-HWID: " && read dirbackup
			echo ""
			echo "----------  RESTAURANDO CUENTAS ESPERE "
			echo ""
			msg -bar
			[[ -z "${dirbackuph}" ]] && dirbackuph="/root/Backup-HWID"
			tput cuu1 && tput dl1
		done
		VPSsec=$(date +%s)
		while read line; do
			hwid=$(echo ${line} | cut -d' ' -f1)
			[[ $(echo $(mostrar_hwid) | grep -w "$hwid") ]] && {
				msg -verm "$hwid [ERROR]"
				continue
			}
			nombre=$(echo ${line} | cut -d' ' -f2)
			DateExp=$(echo ${line} | cut -d' ' -f3)
			DataSec=$(date +%s --date="$DateExp")
			[[ "$VPSsec" -lt "$DataSec" ]] && dias="$(($(($DataSec - $VPSsec)) / 86400))" || dias="NP"

			add_hwid "$hwid" "$nombre" "$dias" &>/dev/null && msg -verd "$hwid [CUENTA VALIDA]" || msg -verm "$hwid [CUENTA INVALIDA FECHA EXPIRADA]"
		done <${dirbackuph}
		;;
	3)
		msg -bar
		msg -ama "	DESCARGAR LINK DE BACKUP"
		msg -bar
		msg -ne " Ingrese Su Link Hwid: "
		read link
		wget -O $HOME/Backup-HWID $link &>/dev/null
		echo ""
		msg -ama " LINK DESCARGADO CON EXITO\n AHORA VUELVE A REGRESAR EN LA OPCION DE RESTAURAR BACKUP\n Opcion 11 despues opcion 2 Restaurar Backup hwid"
		msg -bar
		;;
	esac
	echo ""
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
backup_token() {
	clear
	clear
	#msg -bar
	msg -tit
	msg -ama "$(fun_trans "        BACKUP DE USUARIOS TOKEN")"
	msg -bar
	menu_func "CREAR BACKUP" "RESTAURAR BACKUP" "DESCARGAR LINK BACKUP"
	msg -bar
	unset selection
	while [[ ${selection} != @([1-3]) ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	case ${selection} in
	1)
		cp ${tokens} $HOME/Backup-TOKEN
		cp ${tokens} /var/www/html/Backup-TOKEN
		msg -azu "$(fun_trans "Procedimiento Hecho con Exito, Guardado en:")"
		echo ""
		echo -e "\033[1;31mBACKUP > [\033[1;32m$HOME/Backup-TOKEN\033[1;31m]"
		echo -e "\033[1;31mBACKUP LINK > [\033[1;32mhttp://$IP:81/Backup-TOKEN\033[1;31m]"
		echo ""
		;;
	2)
		while [[ ! -e ${dirbackupt} ]]; do
			echo -ne "\033[1;37m ¡¡Recomiendo DESACTIVAR Limitador si es que lo tiene ACTIVO!!\n"
			echo -ne "\033[1;37m Escriba la ubicacion de la copia de seguridad\n"
			msg -bar
			echo -ne "\033[1;37m ENTER: para ruta predeterminada /root/Backup-TOKEN: " && read dirbackup
			echo ""
			echo "----------  RESTAURANDO CUENTAS ESPERE "
			echo ""
			msg -bar
			[[ -z "${dirbackupt}" ]] && dirbackupt="/root/Backup-TOKEN"
			tput cuu1 && tput dl1
		done
		VPSsec=$(date +%s)
		while read line; do
			usuario=$(echo ${line} | cut -d' ' -f1)
			[[ $(echo $(mostrar_token) | grep -w "$usuario") ]] && {
				msg -verm "$usuario [ERROR]"
				continue
			}
			nombre=$(echo ${line} | cut -d' ' -f2)
			DateExp=$(echo ${line} | cut -d' ' -f3)
			DataSec=$(date +%s --date="$DateExp")
			[[ "$VPSsec" -lt "$DataSec" ]] && dias="$(($(($DataSec - $VPSsec)) / 86400))" || dias="NP"

			add_token "$usuario" "$nombre" "$dias" &>/dev/null && msg -verd "$usuario [CUENTA VALIDA]" || msg -verm "$usuario [CUENTA INVALIDA FECHA EXPIRADA]"
		done <${dirbackupt}
		;;
	3)
		msg -bar
		msg -ama "	DESCARGAR LINK DE BACKUP"
		msg -bar
		msg -ne " Ingrese Su Link Token: "
		read link
		wget -O $HOME/Backup-TOKEN $link &>/dev/null
		echo ""
		msg -ama " LINK DESCARGADO CON EXITO\n AHORA VUELVE A REGRESAR EN LA OPCION DE RESTAURAR BACKUP\n Opcion 11 despues opcion 2 Restaurar Backup Token"
		msg -bar
		;;
	esac
	echo ""
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

#hacer backup de ssh/hwid/token
menuback() {
	clear
	#msg -bar
	msg -tit
	msg -ama "	\e[37mBACKUP DE CUENTAS SSH|HWID|TOKEN\e[0m"
	msg -bar
	menu_func "CREAR BACKUP SSH" "CREAR BACKUP HWID" "CREAR BACKUP TOKEN"
	msg -bar
	unset selection
	while [[ ${selection} != @([0-3]) ]]; do
		echo -ne "\033[1;37m$(fun_trans "Seleccione una Opcion"): " && read selection
		tput cuu1 && tput dl1
	done
	case ${selection} in
	1) backup_ssh ;;
	2) backup_hwid ;;
	3) backup_token ;;
	0) ${SCPusr}/usercodes ;;
	esac
}
baner_personalizado() {
	clear
	local="/etc/VPS-MX/bannerssh"
	msg -bar

	echo -e "\033[1;33m    Para Salir Ctrl + C o 0 Para Regresar\033[1;33m"
	echo -e " \033[1;31m[ !!! ]\033[1;33m INGRESA TU BANNER AQUI  \033[1;31m\033[1;33m"
	msg -bar

	echo -e " \033[1;31mLuego de Pegar tu banner Presiona Ctrl + x y Enter \033[1;33m \033[1;31m\033[1;33m"

	echo -ne "\033[1;33m"
	read -p " Presiona Enter para Continuar "
	apt install nano -y >/dev/null 2>&1
	touch /tmp/bannerssh
	nano /tmp/bannerssh
	cat /tmp/bannerssh >/etc/VPS-MX/bannerssh
	rm -rf /tmp/bannerssh
	#echo '<p style="text-align: center;"><span style="color: #9ffff;"><strong>'$credi'</strong></span><br /><em><span style="color: #ff0000;"><strong>By LACASITA&bull;MX</strong></span></em></p>' >> $local
	[[ -d /etc/dropbear ]] && {
		[[ -e /etc/VPS-MX/bannerssh ]] && cat /etc/VPS-MX/bannerssh >/etc/dropbear/banner
	} || men="NO EXISTE DROPBEAR"
	msg -bar
	echo -ne " \033[1;31m[ ! ] VERIFICANDO DROPBEAR"
	service dropbear restart >/dev/null 2>&1
	[[ -e /etc/init.d/dropbear ]] && {
		/etc/init.d/dropbear restart >/dev/null 2>&1 && echo -e "\033[1;32m [OK]" || {
			echo -e "\033[1;31m - BANNER INCOMPATIBLE CON DROPBEAR -"
			echo "" >/etc/dropbear/banner
			/etc/init.d/dropbear restart >/dev/null 2>&1 && echo -e "\033[1;32m [OK]"
		}
	} || echo -e "\033[1;31m [ $men ]"

	service ssh restart >/dev/null 2>&1
	service sshd restart >/dev/null 2>&1
	[[ -e /etc/init.d/ssh ]] && /etc/init.d/ssh restart >/dev/null 2>&1 && echo -e "\033[1;31m[ ! ] VERIFICANDO SSH\033[1;32m [OK]" || echo -e "\033[1;31m[ ! ] VERIFICANDO SSH\033[1;31m [FAIL]"
	sleep 0.1s
	exit
}

baner_fun() {
	banner_on() {
		clear
		clear
		local="/etc/VPS-MX/bannerssh"
		rm -rf $local >/dev/null 2>&1
		local2="/etc/dropbear/banner"
		chk=$(cat /etc/ssh/sshd_config | grep Banner)
		if [ "$(echo "$chk" | grep -v "#Banner" | grep Banner)" != "" ]; then
			local=$(echo "$chk" | grep -v "#Banner" | grep Banner | awk '{print $2}')
		else
			echo "" >>/etc/ssh/sshd_config
			echo "Banner /etc/VPS-MX/bannerssh" >>/etc/ssh/sshd_config
			local="/etc/VPS-MX/bannerssh"
		fi
		#msg -bar
		msg -tit
		msg -ama "         AGREGAR BANNER SSH/SSL/DROPBEAR"
		msg -bar
		msg -ne "$(fun_trans "Inserte el BANNER de preferencia en HTML sin saltos"): \n\n" && read ban_ner
		echo ""
		msg -bar
		credi="$(less /etc/VPS-MX/message.txt)"
		echo "$ban_ner" >>$local
		echo '<p style="text-align: center;"><span style="color: #9ffff;"><strong>'$credi'</strong></span><br /><em><span style="color: #ff0000;"><strong>By LACASITA&bull;MX</strong></span></em></p>' >>$local
		if [[ -e "$local2" ]]; then
			rm $local2 >/dev/null 2>&1
			cat $local >$local2
		fi
		msg -verd "$(fun_trans "           BANNER AGREGADO CON !! EXITO ¡¡")" && msg -bar
		service dropbear restart 2>/dev/null
		service ssh restart 2>/dev/null

	}

	banner_off() {
		clear
		clear
		#msg -bar
		msg -tit
		msg -ama "         ELIMINANDO  BANNER SSH/SSL/DROPBEAR"
		msg -bar
		rm -rf /etc/VPS-MX/bannerssh
		sed -i '/'Banner'/d' /etc/ssh/sshd_config
		sed -i -e 's/^[ \t]*//; s/[ \t]*$//; /^$/d' /etc/ssh/sshd_config
		echo "" >>/etc/ssh/sshd_config
		rm -rf /etc/dropbear/banner >/dev/null 2>&1
		echo "" >/etc/dropbear/banner >/dev/null 2>&1
		service dropbear stop 2>/dev/null
		service ssh restart 2>/dev/null
		service dropbear restart 2>/dev/null
		echo -e "\033[1;92m            BANNER ELIMINADO !! EXITO ¡¡ "
		msg -bar
	}
	clear
	clear
	#msg -bar
	msg -tit
	msg -ama "         AGREGAR BANNER SSH/SSL/DROPBEAR"
	msg -bar
	echo -e "${cor[1]}            Escoja la opcion deseada."
	msg -bar
	echo -e "\033[1;92m 1).- \033[1;37m AGREGAR BANNER SSH/SSL/DROPBEAR "
	echo -e "\033[1;92m 2).- \033[1;37m AGREGAR BANNER PERSONALIZADO "
	echo -e "\033[1;92m 3).- \033[1;37m ELIMINAR Y DESACTIVAR BANNER   "
	msg -bar
	echo -ne "\033[1;37mDigite solo el numero segun su respuesta: \033[1;32m"
	read opcao
	case $opcao in
	1)
		msg -bar
		banner_on
		;;
	2)
		clear
		msg -tit
		echo -e "\e[1;33m"
		echo -e " Al escojer que coloques tu Banner creado fuera del Script, no se "
		echo -e "    Responsabiliza por el Fallo de ciertos recursos del script\e[31m"

		local2="/etc/VPS-MX/bannerssh"
		chk=$(cat /etc/ssh/sshd_config | grep Banner)
		if [ "$(echo "$chk" | grep -v "#Banner" | grep Banner)" != "" ]; then
			local=$(echo "$chk" | grep -v "#Banner" | grep Banner | awk '{print $2}')
		else
			echo "Banner /etc/VPS-MX/bannerssh" >>/etc/ssh/sshd_config
			local="/etc/VPS-MX/bannerssh"
		fi
		while true; do
			echo -e "\e[1;31m ESTAS SEGURO QUE TIENES TU BANNER BIEN ESTRUCTURADO\e[1;33m "
			read -p " [ s | n ]: " si_no
			if [[ "$si_no" = @(s|S|y|Y) ]]; then
				baner_personalizado
			elif [[ "$si_no" = @(n|N) ]]; then
				return 0
			fi
		done
		;;
	3)
		msg -bar
		banner_off
		;;
	esac
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

rec_total() {
	clear
	clear
	#msg -bar
	msg -tit
	echo -e "\033[1;32m  REGISTRO TOTAL DE CUENTAS VIEJAS Y NUEVAS"
	msg -bar
	msg -ama "	CUENSTAS SSH"
	if [[ -e /etc/VPS-MX/VPS-MXuser ]]; then
		echo "$(cat /etc/VPS-MX/VPS-MXuser)"
	else
		msg -ama " NO HAY REGISTRO"
	fi
	msg -bar
	msg -ama "	CUENTAS HWID"
	if [[ -e /etc/VPS-MX/User-HWID ]]; then
		echo "$(cat /etc/VPS-MX/User-HWID)"
	else
		msg -ama " NO HAY REGISTRO"
	fi
	msg -bar
	msg -ama "	CUENTAS TOKEN"
	if [[ -e /etc/VPS-MX/User-TOKEN ]]; then
		echo "$(cat /etc/VPS-MX/User-TOKEN)"
	else
		msg -ama " NO HAY REGISTRO"
	fi
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

verif_funx() {
	clear
	clear
	msg -bar
	msg -tit
	echo -e "\033[1;32m             LIMITADOR DE CUENTAS"
	msg -bar
	echo -e "Esta Opcion Limita las Conexiones de SSH/SSL/DROPBEAR"
	PIDVRF="$(ps aux | grep -v grep | grep "verif")"
	if [[ -z $PIDVRF ]]; then
		msg -bar
		echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el limitador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 180s| 3 minutos\n     Cuantos Segundos (Numeros Unicamente): " && read tiemlim
		[[ -z "$tiemlim" ]] && tiemlim="180"
		echo "${tiemlim}" >/etc/VPS-MX/controlador/tiemlim.log
		screen -dmS verif ${SCPdir}/tmp/verifi
		[[ $(grep -wc "verif" /etc/autostart) = '0' ]] && {
			echo -e "ps x |grep 'verif' |grep -v 'grep' || screen -dmS verif ${SCPdir}/tmp/verifi" >>/etc/autostart
		} || {
			sed -i '/verif/d' /etc/autostart
			echo -e "ps x |grep 'verif' |grep -v 'grep' || screen -dmS verif ${SCPdir}/tmp/verifi" >>/etc/autostart
		}
	else

		screen -r -S "verif" -X quit
		screen -wipe 1>/dev/null 2>/dev/null
		[[ $(grep -wc "verif" /etc/autostart) != '0' ]] && {
			sed -i '/verif/d' /etc/autostart
		}

		[[ -e ${SCPdir}/USRonlines ]] && rm ${SCPdir}/USRonlines
		[[ -e ${SCPdir}/USRexpired ]] && rm ${SCPdir}/USRexpired
		[[ -e ${SCPdir}/USRbloqueados ]] && rm ${SCPdir}/USRbloqueados
	fi
	msg -bar
	[[ -z ${VERY} ]] && verificar="\033[1;32m ACTIVADO " || verificar="\033[1;31m DESACTIVADO "
	echo -e "            $verificar  --  CON EXITO"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}

##DESBLOEUEAR

verif2_funx() {
	clear
	clear
	msg -bar
	msg -tit
	echo -e "\033[1;32m      DESBLOQUEO AUT. Y LIMPIADOR DE EXPIARDOS"
	msg -bar
	echo -e "Esta opcion desbloquea cada 5 minutos a usuarios\nbloqueados por el limitador y limpia los usuarios expirados"
	PIDVRF2="$(ps aux | grep -v grep | grep "autode")"
	if [[ -z $PIDVRF2 ]]; then
		msg -bar
		echo -ne "\033[1;96m   ¿Cada cuantos segundos ejecutar el desbloqueador?\n\033[1;97m  +Segundos = -Uso de CPU | -Segundos = +Uso de CPU\033[0;92m \n                Predeterminado:\033[1;37m 300s\n     Cuantos Segundos (Numeros Unicamente): " && read tiemdes
		[[ -z "$tiemdes" ]] && tiemdes="300"
		echo "${tiemdes}" >/etc/VPS-MX/controlador/tiemdes.log
		#screen -dmS desbloqueo ${SCPdir}/tmp/autodes

		screen -dmS autode ${SCPdir}/tmp/autodes
		#
		[[ $(grep -wc "autodes" /etc/autostart) = '0' ]] && {
			echo -e "ps x | grep 'autode' |grep -v 'grep' || screen -dmS autode ${SCPdir}/tmp/autodes" >>/etc/autostart
		} || {
			sed -i '/autodes/d' /etc/autostart
			echo -e "ps x | grep 'autode' |grep -v 'grep' || screen -dmS autode ${SCPdir}/tmp/autodes" >>/etc/autostart
		}
	else

		screen -r -S "autode" -X quit
		screen -wipe >/dev/null
		[[ $(grep -wc "autodes" /etc/autostart) != '0' ]] && {
			sed -i '/autodes/d' /etc/autostart
		}
		sleep 1

	fi
	msg -bar
	[[ -z ${VERY2} ]] && desbloqueo="\033[1;32m ACTIVADO " || desbloqueo="\033[1;31m DESACTIVADO "
	echo -e "            $desbloqueo  --  CON EXITO"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
}
tokenpass() {
	#
	clear
	msg -bar
	msg -tit
	apass=$(cat ${SCPdir}/.passw)
	msg -ama "CONFIGURACION DE CONTRASEÑA TOKEN"
	msg -bar

	if [[ ! -z "$apass" ]]; then
		msg -azu "CONTRASEÑA ACTUAL: $apass"
		msg -bar
	fi
	while true; do
		echo -e " $(msg -verm "╭╼╼╼[")$(msg -azu "INGRESE SU CONTRASEÑA, ENTER PARA CANCELAR")$(msg -verm "]")"
		echo -ne " $(msg -verm "╰╼")\033[37;1m> " && read npass
		npass="$(echo $npass | sed 'y/áÁàÀãÃâÂéÉêÊíÍóÓõÕôÔúÚñÑçÇªº/aAaAaAaAeEeEiIoOoOoOuUnNcCao/')"
		if [[ -z $npass ]]; then
			break
		elif [[ "${#npass}" -lt "6" ]]; then
			err_fun 5 && tput cuu1 && tput dl1 && continue
		elif [[ "${#npass}" -gt "36" ]]; then
			err_fun 6 && tput cuu1 && tput dl1 && continue
		fi
		break
	done
	[[ -z "$npass" ]] && return 1
	tput cuu1 && tput dl1 && tput cuu1 && tput dl1
	printf "$npass" >${SCPdir}/.passw
	clear
	msg -bar
	echo -e " $(msg -ama "╭╼╼╼╼╼╼╼╼╼[")$(msg -azu "SE GUARDO LA NUEVA CONTRASEÑA")$(msg -ama "]")"
	echo -ne " $(msg -ama "╰╼")\033[37;1m> " && msg -azu "$npass"
	cat_users=$(cat "/etc/passwd" | grep 'home' | grep 'false' | grep -v 'syslog' | grep -v '::/' | grep -w 'token' | awk -F ':' '{print $1}')
	[[ ! -z "$cat_users" ]] && msg -bar && msg -ama " APLICAR A TODOS LOS CLIENTES [S/N]: " && read allpass
	if [[ "$allpass" = @(S|s) ]]; then
		msg -bar
		msg -ama "LA CONTRASEÑA TOKEN SERÁ APLICADO PARA TODOS"
		for u in $(echo "$cat_users"); do
			(
				echo $npass
				echo $npass
			) | passwd $u 2>/dev/null
		done
		tput cuu1 && tput dl1
		msg -verd "LA CONTRASEÑA TOKEN FUE APLICADA PARA TODOS"
	fi

}
veri=$(ps x | grep -v grep | grep "verif")
[[ ! $veri ]] && verificar="\033[1;31m[DESACTIVADO]" || verificar="\033[1;32m[ACTIVADO] "
des=$(ps x | grep -v grep | grep "autode")
[[ ! $des ]] && desbloqueo="\033[1;31m[DESACTIVADO]" || desbloqueo="\033[1;32m[ACTIVADO] "
msg -tit
msg -bar
msg -ama "  MENU ADMINISTRACION DE USUARIOS SSL/SSH/DROPBEAR"
msg -bar
msg -bar3

#menuusercodes
echo -e " \e[1;93m[\e[92m1\e[93m] $(msg -verm2 "➛ ") $(msg -azu "CREAR NUEVO USUARIO [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m]")"
echo -e " \e[1;93m[\e[92m2\e[93m] $(msg -verm2 "➛ ") $(msg -azu "CREAR USUARIO TEMPORAL")"
echo -e " \e[1;93m[\e[92m3\e[93m] $(msg -verm2 "➛ ") $(msg -azu "REMOVER USUARIO [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m]")"
echo -e " \e[1;93m[\e[92m4\e[93m] $(msg -verm2 "➛ ") $(msg -azu "BLOQUEAR |DESBLOQUEAR USUARIO")"
echo -e " \e[1;93m[\e[92m5\e[93m] $(msg -verm2 "➛ ") $(msg -azu "REINICIAR CONTADOR DE BLOQUEADOS |EXPIRADOS")"
echo -e " \e[1;93m[\e[92m6\e[93m] $(msg -verm2 "➛ ") $(msg -azu "EDITAR USUARIO")"
echo -e " \e[1;93m[\e[92m7\e[93m] $(msg -verm2 "➛ ") $(msg -azu "RENOVAR USUARIO [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m]")"
echo -e " \e[1;93m[\e[92m8\e[93m] $(msg -verm2 "➛ ") $(msg -azu "MOSTRAR CUENTAS [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m]")"
echo -e " \e[1;93m[\e[92m9\e[93m] $(msg -verm2 "➛ ") $(msg -azu "USUARIOS CONECTADOS [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m] ")"
echo -e " \e[1;93m[\e[92m10\e[93m] $(msg -verm2 "➛ ") $(msg -azu "ELIMINAR USUARIOS VENCIDOS")"
echo -e " \e[1;93m[\e[92m11\e[93m] $(msg -verm2 "➛ ") $(msg -azu "BACKUP USUARIOS [\e[93m\e[5;100mSSH/HWID/TOKEN \e[0m\e[37m]")"
echo -e " \e[1;93m[\e[92m12\e[93m] $(msg -verm2 "➛ ") $(msg -azu "AGREGAR/ELIMINAR BANNER")"
echo -e " \e[1;93m[\e[92m13\e[93m] $(msg -verm2 "➛ ") $(msg -azu "\033[1;31m⚠️ELIMINAR TODOS LOS USUARIOS⚠️      ")"
echo -e " \e[1;93m[\e[92m14\e[93m] $(msg -verm2 "➛ ") $(msg -azu "🔒 LIMITADOR-DE-CUENTAS 🔒   ${verificar}    ")"
echo -e " \e[1;93m[\e[92m15\e[93m] $(msg -verm2 "➛ ") $(msg -azu "🔓 DESBLOQUEO-AUTOMATICO 🔓   ${desbloqueo}     ")"
echo -e " \e[1;93m[\e[92m16\e[93m] $(msg -verm2 "➛ ") $(msg -azu "\033[1;92mLOG DE CUENTAS REGISTRADAS")"
echo -e " \e[1;93m[\e[92m17\e[93m] $(msg -verm2 "➛ ") $(msg -azu "LIMPIAR LOG DE LIMITADOR")"
[[ -e "${SCPusr}/Limiter2.log" ]] && echo -ne "$(msg -verd " [18]") $(msg -verm2 "➛ ") " && msg -azu "$(fun_trans "\033[1;91mVER LOG DE LIMITADOR")"
[[ -e "${SCPdir}/.passw" ]] && echo -ne "$(msg -verd " [19]") $(msg -verm2 "➛ ") " && msg -azu "CAMBIAR TOKEN GENERAL"
echo -ne ""$(msg -bar)"   \n$(msg -verd "  [0]") $(msg -verm2 "➛ ")" && msg -bra "  \e[97m\033[1;41m VOLVER \033[1;37m"
msg -bar
selection=$(selection_fun 19)
case ${selection} in
1) menu_crearuser ;;
2) ${SCPdir2}/Crear-Demo.sh ;;
3) menudel ;;
4) block_user ;;
5) reset_contador ;;
6) edit_user ;;
7) menu_renova ;;
8) menudata ;;
9) menumoni ;;
10) rm_vencidos ;;
11) menuback ;;
12) baner_fun ;;
13) eliminar_all ;;
14) verif_funx ;;  #/etc/VPS-MX/tmp/verifi ;;
15) verif2_funx ;; #/etc/VPS-MX/tmp/autodes;;
16) rec_total ;;
17)
	rm -rf ${SCPusr}/Limiter2.log
	echo -e "\033[1;32m  LOG ELIMINADO CON EXITO"
	msg -bar
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
	;;
18)
	clear
	clear
	msg -bar
	sed -i -e 's/^[ \t]*//; s/[ \t]*$//; /^$/d' /etc/VPS-MX/controlador/Limiter2.log
	[[ -e "${SCPusr}/Limiter2.log" ]] && {
		msg -tit
		msg -ama "              REGISTRO DEL LIMITADOR "
		cat ${SCPusr}/Limiter2.log
		msg -bar
	}
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
	;;
19)
	clear
	tokenpass
	msg -ne " Enter Para Continuar" && read enter
	${SCPusr}/usercodes
	;;
esac
